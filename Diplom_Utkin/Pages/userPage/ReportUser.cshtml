@page
@model Diplom_Utkin.Pages.userPage.ReportUserModel
@{
	ViewData["Title"] = "Отчеты";
}
<div class="window-box kabinet-box  kabinetHeight">
	@await Html.PartialAsync("Headers/_UserHeader")
	<section>
		<div id="overlay" class="overlay"></div>
		<div id="sideMenu" class="side-menu">
			<form id="profile" onsubmit="return Update_Method_Profile(event)" method="post">
				<h1>Профиль</h1>
				<div class="myRow">
					<div class="form-group">
						<label asp-for="_user.Loggin" class="control-label">E-mail</label>
						<input asp-for="_user.Loggin" class="form-control" id="portfile_mail" type="email" required disabled />
					</div>
					<div>
						<a onclick="updateLogin()"><img class="svgEdit" src="/Image/icon-edit.svg" /></a>
					</div>
				</div>
				<span asp-validation-for="_user.Loggin" id="profileMailError" class="text-danger"></span>

				<div class="myRow">
					<div class="form-group">
						<label asp-for="_user.Phone" class="control-label">Телефон</label>
						<input asp-for="_user.Phone" class="form-control" id="portfile_phone" type="tel" required disabled />

					</div>
					<div>
						<a onclick="updatePhone()"><img class="svgEdit" src="/Image/icon-edit.svg" /></a>
					</div>
				</div>
				<span asp-validation-for="_user.Phone" id="profilePhoneError" class="text-danger"></span>
				<button class="myButton" style="display:none" name="action" id="portfile_save_btn" value="NoN">Сохранть</button>
			</form>
			<div id="balanceHistoriBlock" class="dataSlice balanceHistori"></div>
		</div>
		<div class="popup kabinetSupportBox">
			<div class="poputContent">
				<div class="top_">
					<div>
						<img onclick="closePopup()" src="/Image/krest.png" alt="Alternate Text" />
					</div>
				</div>
				<form id="myForm" method="post" onsubmit="return moneuBtn() && isValidMony()">
					<h1 id="popTitle">Пополнение счета</h1>
					<div class="card">
						<div class="card-front">
							<div class="card-number">
								<div class="form-group">
									<label asp-for="_cardModel.Number" class="control-label">Номер карты</label>
									<input asp-for="_cardModel.Number" id="cardNumber" onchange="formatCart(input)" oninput="formatCart(input)" placeholder="0000 0000 0000 0000" class="form-control" type="text" required />
									<span asp-validation-for="_cardModel.Number" id="cardNumberError" class="text-danger"></span>
								</div>
							</div>
							<div class="card-details">
								<div class="card-name">
									<img src="/Image/payment_systemMIR.png" />
								</div>
								<div class="expiration-date">
									<label>Срок</label>
									<input asp-for="_cardModel.ActivityDate" id="cardActivityDate" onchange="formatDate(inputDate)" oninput="formatDate(inputDate)" placeholder="MM/YY" class="form-control" type="text" required />
									<span asp-validation-for="_cardModel.ActivityDate" id="cardActivityDateError" class="text-danger"></span>
								</div>
							</div>
						</div>
						<div class="card-back">
							<div class="black-stripe"></div>
							<div class="cvc">
								<label asp-for="_cardModel.SVS_Code" class="control-label">CVC</label>
								<input asp-for="_cardModel.SVS_Code" id="cardCode" onchange="formatCode(inputCode)" oninput="formatCode(inputCode)" placeholder="000" class="form-control" type="text" required />
								<span asp-validation-for="_cardModel.SVS_Code" id="cardSVS_CodeError" class="text-danger"></span>
							</div>
						</div>
					</div>
					<div class="myRow">
						<div class="form-group">
							<label asp-for="targetSumm" class="control-label">Сумма</label>
							<input asp-for="targetSumm" id="summText" class="form-control" type="number" required />
							<span asp-validation-for="targetSumm" id="summTextError" class="text-danger"></span>
						</div>
						<button class="myButton" name="action" type="submit" value="btnBalans">Выполнить</button>
					</div>
					<div class="form-group">
						<input asp-for="isVuvod" class="form-control" type="number" id="popOperationType" />
					</div>
				</form>
				<form id="buyForm" method="post" onsubmit="return BuyFormValidation()">
					<h1 id="popTitleBuy"></h1>
					<input style="visibility:hidden" id="targetId" disabled />
					<div class="form-group myRow">
						<div class="hd-imgBlock">
							<img id="targetToolImg" />
						</div>
						<label id="toolName"></label>
					</div>

					<div class="form-group myRow">
						<input id="peiceTool" disabled />
					</div>

					<div class="myRow">
						<div class="form-group">
							<label asp-for="targetSumm" id="edIzm" class="control-label"></label>
							<input asp-for="targetSumm" id="summOperation" class="form-control" type="number" required />
							<span asp-validation-for="targetSumm" id="summOperationError" class="text-danger"></span>
						</div>
						<div class="form-group">
							<label id="dostupSredstv"></label>
						</div>
					</div>
					<button id="buyBtn" class="myButton" name="action" type="submit" value="btnBuy">Выполнить</button>
					<button id="sellBtn" style="display:none" class="myButton" name="action" type="submit" value="btnBuy">Выполнить</button>
				</form>
			</div>
		</div>
	</section>
	

	<div class="myRow space-between">
		<form method="post" onsubmit="return validRepForm()" class="myRow otchot-mod">
			<div class="dataSlice">
				<label>Тип отчета:</label>
				<select id="reportType" name="TypeReport">
					<option value="0">Выберите тип отчета</option>
					<option value="1">Отчет о сделках</option>  @* по диапазону дат *@
					<option value="2">Отчет о структуре портфеля</option> @* на текущую дату *@
				</select>
				<span id="typeError" class="text-danger"></span>
			</div>


			<div class="dataSlice">
				<label>От</label>
				<input asp-for="request.startDate" type="date" name="dateStart" id="startData" />
				<span asp-validation-for="request.startDate" id="startDateError" class="text-danger"></span>
			</div>

			<div class="dataSlice">
				<label>До</label>
				<input asp-for="request.endDate"  type="date" name="dateEnd" id="dateEnd" />
				<span asp-validation-for="request.endDate" id="endDateError" class="text-danger"></span>
			</div>


			<button name="action" type="submit" id="report_btn" value="formatdReport" class="myButton-support control-width">Сформировать</button>
		</form>
	</div>

	<div class="myRow tb_header space-between">
		<h1 id="titleReport">Отчет @Model.reportTite</h1>
	</div>
	<div class="tb_Box">
		@if (Model.InvestToolList != null)
		{
			<div>
				<div class="tb_Box fonzize-reg tb_boxDop">
					<div>
						<table class="table">
							<thead>
								<tr>
									<th>
										Дата
									</th>
									<th>
										Инструмент
									</th>
									<th>
										Тип операции
									</th>
									<th>
										Количество
									</th>
									<th>
										Стоимость
									</th>
								</tr>
							</thead>
							<tbody>
								@{
									foreach (var item in Model.InvestToolList)
									{
										<tr>
											<td>
												@Html.DisplayFor(modelItem => item.Date)
											</td>
											<td>
												@Html.DisplayFor(modelItem => item.InvestTools.NameInvestTool)
											</td>
											<td>
												@if (item.Money > 0)
												{
													<text>Покупка</text>
												}
												else {
													<text>Продажа</text>
												}
												
											</td>
											<td>
												@Html.DisplayFor(modelItem => item.Quentity)
											</td>
											<td>
												@Html.DisplayFor(modelItem => item.Money)
											</td>
										</tr>
									}
								}
							</tbody>
						</table>
					</div>
				</div>
			</div>
		}
		@if (Model.porfolioList != null)
		{
			<div class="myRow">
				<div class="tb_Box fonzize-reg">
					<div>
						<table class="table">
							<thead>
								<tr>
									<th>
										Название
									</th>
									<th>
										Количество
									</th>
									<th>
										Стоимость
									</th>
								</tr>
							</thead>
							<tbody>
								@{
									foreach (var item in Model.porfolioList)
									{
										<tr>
											<td>
												@Html.DisplayFor(modelItem => item.InvestTool.NameInvestTool)
											</td>
											<td>
												@Html.DisplayFor(modelItem => item.Quentity)
											</td>
											<td>
												@Html.DisplayFor(modelItem => item.AllManey)
											</td>
										</tr>
									}
								}
							</tbody>
						</table>
					</div>
				</div>

				<div class="dataSlice dop-canvas dop-canvas-user">
					<canvas id="myPieChart1"></canvas>
				</div>
			</div>
			


			<script>
				var ctx1 = document.getElementById('myPieChart1').getContext('2d');

				var myPieChart1 = new Chart(ctx1, {
					type: 'pie',
					data: {
						labels: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.name)),
						datasets: [{
							data: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.price)),

						}]
					},
					options: {
						animation: {
							duration: 0
						},
						responsive: true,
						plugins: {
							title: {
							  display: true,
							  text: 'Объем покупок клиентов',
							  font: { size: 20, weight: 'bold' },
							  padding: { top: 10, bottom: 0 }
							},
							legend: {
								position: 'bottom',
								labels: {
									font:{
										size:18
									}
								}
							},
							tooltip: {
								callbacks: {
									  label: function(context) {
										return context.parsed + ' ₽';

									  }
								}
							}
						}
					}
				});
			</script>
		} 

	</div>

</div>

<script>
	$(document).ready(function ()
	{
			var hasErrors = @Html.Raw(Json.Serialize(Model.errorSupport));
			if(hasErrors == 1){
				openVuvod();
				showNotification('Недостаточно средств');
			}

	})

	async function OpenbalanceHistori() {
		var id_ = @Model.uId;
		var data = await loadBalanceHistory(id_);

		createBalanceBlock(data);

		profilOpen();

		document.getElementById('balanceHistoriBlock').style.display = 'block';
		document.getElementById('profile').style.display = 'none';
	}

	document.getElementById('reportType').addEventListener('change', function() {
		var selectedValue = document.getElementById('reportType').value;
		let startData1 = document.getElementById('startData');
		let dateEnd1 = document.getElementById('dateEnd');

		console.log('selectedValue: ', selectedValue);

		if(selectedValue == '1'){
			startData1.disabled = false;
			dateEnd1.disabled = false;

		}
		else{
			startData1.disabled = true;
			dateEnd1.disabled = true;
		}
	});

	function validRepForm()
	{
		let type = document.getElementById('reportType');
		let startData = document.getElementById('startData');
		let dateEnd = document.getElementById('dateEnd');

		let typeError = document.getElementById('typeError');
		let startDateError = document.getElementById('startDateError');
		let endDateError = document.getElementById('endDateError');

		let report_btn = document.getElementById('report_btn');

		if(type.value == 0 ){
			typeError.textContent = 'Виберите тип отчета!'
			type.style.borderBottom = '2px solid red';

			report_btn.style.alignSelf = 'center';
			return false;
		}
		else {
			typeError.textContent = ''
			type.style.borderBottom = '0';

			report_btn.style.alignSelf = 'end';
		}

		if(type.value == 2) return true;
		
		if (startData.value == '01.01.0001'||startData.value == ''){
			startDateError.textContent = 'укажите дату!'
			startData.style.borderBottom = '2px solid red';

			report_btn.style.alignSelf = 'center';
			return false;
		}
		else {
			startDateError.textContent = ''
			startData.style.borderBottom = '0';

			report_btn.style.alignSelf = 'end';
		}

		if (dateEnd.value == '01.01.0001'||dateEnd.value == ''){
			endDateError.textContent = 'укажите дату!'
			dateEnd.style.borderBottom = '2px solid red';

			report_btn.style.alignSelf = 'center';
			return false;
		}
		else {
			endDateError.textContent = ''
			dateEnd.style.borderBottom = '0';

			report_btn.style.alignSelf = 'end';
		}

		const selectedDate = new Date(dateEnd.value);
		const currentDate = new Date();

		currentDate.setHours(0, 0, 0, 0);


		if(selectedDate > currentDate){
			endDateError.textContent = 'Указана некоректнаяя дата!'

			report_btn.style.alignSelf = 'center';
			return false;
		}
		else {
			endDateError.textContent = ''

			report_btn.style.alignSelf = 'end';
		}

		if(startData.value > dateEnd.value ){
			endDateError.textContent = 'Указан не корректный интервал!';
			startDateError.textContent = 'Указан не корректный интервал!';

			report_btn.style.alignSelf = 'center';
			return false;
		}
		else {
			endDateError.textContent = ''
			startDateError.textContent = '';
		}


		return true;
	}


	let inputPhone = document.getElementById("portfile_phone");
	inputPhone.addEventListener("keyup", (e) => { formatinputPhone(e.target); });
	inputPhone.addEventListener("keypress", (e) => { formatinputPhone(e.target); });


	function formatinputPhone(inputPhone) {
		var input_val = inputPhone.value;
		if (input_val === "") { return; }
		var original_len = input_val.length;
		var caret_pos = inputPhone.selectionStart;
		input_val = input_val.replace(/\D/g, "");
		if (input_val.length > 0 && input_val[0] !== "7") {
			input_val = "7" + input_val;
		}
		if (input_val.length > 11) {
			input_val = input_val.substring(0, 11);
		}
		var formatted = "+";

		if (input_val.length > 0) {
			formatted += input_val[0];
		}
		if (input_val.length > 1) {
			formatted += " (" + input_val.substring(1, 4);
		}
		if (input_val.length >= 4) {
			formatted += ")";
		}
		if (input_val.length >= 4) {
			formatted += " " + input_val.substring(4, 7);
		}
		if (input_val.length >= 7) {
			formatted += "-" + input_val.substring(7, 9);
		}
		if (input_val.length >= 9) {
			formatted += "-" + input_val.substring(9, 11);
		}

		inputPhone.value = formatted;
		var updated_len = formatted.length;
		caret_pos = updated_len - original_len + caret_pos;
		if (caret_pos < 0) caret_pos = 0;
		inputPhone.setSelectionRange(caret_pos, caret_pos);


		if (input_val.length < 11) {
			inputPhone.style.borderBottom = '2px solid red';
		} else {
			inputPhone.style.borderBottom = '2px Solid black';
		}
	}

	let input = document.getElementById("cardNumber");
	input.addEventListener("keyup", (e) => { formatCart(e.target); });
	input.addEventListener("keypress", (e) => { formatCart(e.target); });

	let inputDate = document.getElementById("cardActivityDate");
	inputDate.addEventListener("keyup", (e) => { formatDate(e.target); });
	inputDate.addEventListener("keypress", (e) => { formatDate(e.target); });

	let inputCode = document.getElementById("cardCode");
	inputCode.addEventListener("keyup", (e) => { formatCode(e.target); });
	inputCode.addEventListener("keypress", (e) => { formatCode(e.target); });


	function formatCart(input) {
		var input_val = input.value;
		console.log('input.value: ', input.value);
		if (input_val === "") { return; }
		var original_len = input_val.length;
		var caret_pos = input.selectionStart;
		input_val = input_val.replace(/\D/g, "").replace(/\B(?=(\d{4})+(?!\d))/g, " ");
		input.value = input_val;
		var updated_len = input_val.length;
		caret_pos = updated_len - original_len + caret_pos;
		input.setSelectionRange(caret_pos, caret_pos);

		if(updated_len < 19) input.style.border = '2px solid red';
		else input.style.border = '0px';
	}
	function formatDate(inputDate) {
		var input_val = inputDate.value;
		if (input_val === "") { return; }
		var original_len = input_val.length;
		var caret_pos = inputDate.selectionStart;
		input_val = input_val.replace(/\D/g, "");
		if (input_val.length > 2) {
			input_val = input_val.substring(0, 2) + "/" + input_val.substring(2);
		}
		inputDate.value = input_val;
		var updated_len = input_val.length;
		caret_pos = updated_len - original_len + caret_pos;
		inputDate.setSelectionRange(caret_pos, caret_pos);

		if(inputDate.value.length < 5 || Number(inputDate.value.substring(0, 2)) > 12) inputDate.style.border = '2px solid red';
		else {
			var curentDate = new Date();
			var month = Number(inputDate.value.substring(0, 2)) - 1;
			var year = 2000 + Number(inputDate.value.substring(3, 5));

			var userDate = new Date(year, month);

			if(userDate < curentDate) inputDate.style.border = '2px solid red';
			else inputDate.style.border = '0px';
		}
	}

	function formatCode(inputCode) {
		var input_val = inputCode.value;
		if (input_val === "") { return; }
		var original_len = input_val.length;
		var caret_pos = inputCode.selectionStart;
		input_val = input_val.replace(/\D/g, "");

		inputCode.value = input_val;
		var updated_len = input_val.length;
		caret_pos = updated_len - original_len + caret_pos;
		inputDate.setSelectionRange(caret_pos, caret_pos);

		if(updated_len < 3) inputCode.style.border = '2px solid red';
		else inputCode.style.border = '0px';
	}

	function isValidMony()
	{
		let input = document.getElementById("cardNumber");
		let inputDate = document.getElementById("cardActivityDate");

		console.log(inputDate.value);

		let inputCode = document.getElementById("cardCode");
		let inputMony = document.getElementById("summText");

		if(input.value.length < 19){
			input.style.border = '2px solid red';
			return false;
		}
		else input.style.border = '0px';

		if(inputDate.value.length < 5 || Number(inputDate.value.substring(0, 2)) > 12) {
			inputDate.style.border = '2px solid red';
			return false;
		}
		else {
			var curentDate = new Date();
			var month = Number(inputDate.value.substring(0, 2)) - 1;
			var year = 2000 + Number(inputDate.value.substring(3, 5));

			console.log('month', month+1);
			console.log('year', year);

			var userDate = new Date(year, month);

			if(userDate < curentDate) {
				inputDate.style.border = '2px solid red';
				return false;
			}
			else inputDate.style.border = '0px';
			return true;
		}

		if(inputCode.value.length < 3) {
			inputCode.style.border = '2px solid red';
			return false;
		}
		else inputCode.style.border = '0px';

		if(inputMony.value.replace('0', '').length < 1 || Number(inputMony.value) < 1) {
			inputMony.style.borderBottom = '2px solid red';
			return false;
		}
		else inputMony.style.borderBottom = '2px Solid #000000';


		return true;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////


	async function loadBalanceHistory(id_)
	{
		const baseUrl = '@Model.apiSettings.BaseUrl';
		const response = await fetch(baseUrl + 'User/LoadBalanceHistory', {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json'
			},
			body: JSON.stringify({ id: id_})
		});
		if (!response.ok) {
			console.log('Error: ', response.json());
			throw new Error('Network response was not ok');
		}
		const data = response.json();
		return data;

	}

	function createBalanceBlock(list){
		 const userList = document.getElementById('balanceHistoriBlock');
		 userList.innerHTML = '';

		 const historyLable = document.createElement('h1');
		 historyLable.textContent = 'История';
		 userList.appendChild(historyLable);

		 var oldDate = '';
		 var svFirst = 1;


		 list.forEach(Recorder => {
			 var hrBlock = document.createElement('hr');
			 var date = Recorder.date.split('T')[0];
			 if(svFirst == 1){

				 oldDate = Recorder.date.split('T')[0];
				 svFirst = 0;

				 var dateBlock1 = document.createElement('label');

				 dateBlock1.textContent = date;

				 userList.appendChild(hrBlock);
				 userList.appendChild(dateBlock1);
			 }

			 if(oldDate != date)
			 {
				 userList.appendChild(hrBlock);
				 var dateBlock = document.createElement('label');
				 dateBlock.textContent = date;
				 userList.appendChild(dateBlock);

				 oldDate = date
			 }


			 var operationType = '';
			 if(Number(Recorder.money) < 0 && Recorder.investToolsId != '0' ) operationType = 'Продажа';
			 else if(Number(Recorder.money) > 0 && Recorder.investToolsId != '0' ) operationType = 'Покупка';
			 else if(Number(Recorder.money) < 0 && Recorder.investToolsId == '0') operationType = 'Вывод средст';
			 else if(Number(Recorder.money) > 0 && Recorder.investToolsId == '0') operationType = 'Пополнение счета';

			 var sum = '';
			 var quentity1 = '';
			 if(Recorder.investToolsId != '0') {
				 sum = String((Number(Recorder.quentity) * Number(Recorder.money)).toFixed(2))+'₽';
				 quentity1 = Recorder.quentity + 'шт.';
			 }
			 else sum =  String(Number(Recorder.money).toFixed(2))+'₽';

			 const investToolNames = Recorder.investToolsId != '0'
										? Recorder.investTools.nameInvestTool
										: '';

			 const bDiv = document.createElement('div');
			 bDiv.classList.add('itemBalance');
			 bDiv.innerHTML = `<div class="myRow">
									<div class="bTitle"><strong>${operationType}</strong> ${investToolNames}</div>
									<div class="dataSlice">
										<label class="bTotalPrice">${sum}</label>
										<label class="bCounter">${quentity1}</label>
									</div>
								</div>`;
			 userList.appendChild(bDiv);
		 });
	}
</script>

@section Scripts {
	@{
		await Html.RenderPartialAsync("_ValidationScriptsPartial");
	}
}