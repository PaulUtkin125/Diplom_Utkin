@page
@model Diplom_Utkin.Pages.userPage.VitrinaModel
@{
	ViewData["Title"] = "Витрина";
}
<div class="window-box kabinet-box kabinetHeight">
	@await Html.PartialAsync("Headers/_UserHeader")
	<section>
		<div id="overlay" class="overlay"></div>
		<div id="sideMenu" class="side-menu">

			<form id="profile" onsubmit="return Update_Method_Profile(event)" method="post">
				<h1>Профиль</h1>
				<div class="myRow">
					<div class="form-group">
						<label asp-for="_user.Loggin" class="control-label">E-mail</label>
						<input asp-for="_user.Loggin" class="form-control" id="portfile_mail" type="email" required disabled />
					</div>
					<div>
						<a onclick="updateLogin()"><img class="svgEdit" src="/Image/icon-edit.svg" /></a>
					</div>
				</div>
				<span asp-validation-for="_user.Loggin" id="profileMailError" class="text-danger"></span>

				<div class="myRow">
					<div class="form-group">
						<label asp-for="_user.Phone" class="control-label">Телефон</label>
						<input asp-for="_user.Phone" class="form-control" id="portfile_phone" type="tel" required disabled />

					</div>
					<div>
						<a onclick="updatePhone()"><img class="svgEdit" src="/Image/icon-edit.svg" /></a>
					</div>
				</div>
				<span asp-validation-for="_user.Phone" id="profilePhoneError" class="text-danger"></span>
				<button class="myButton" style="display:none" name="action" id="portfile_save_btn" value="NoN">Сохранть</button>
			</form>
			<div id="balanceHistoriBlock" class="dataSlice balanceHistori"></div>
		</div>
		<div class="popup kabinetSupportBox">
			<div class="poputContent">
				<div class="top_">
					<div>
						<form method="post">
							<button name="NoN"><img src="/Image/krest.png" alt="Alternate Text" /></button>
						</form>
					</div>
				</div>
				<form id="myForm" onsubmit="return moneuBtn() && isValidMony()" method="post">
					<h1 id="popTitle">Пополнение счета</h1>
					<div class="card">
						<div class="card-front">
							<div class="card-number">
								<div class="form-group">
									<label asp-for="_cardModel.Number" class="control-label">Номер карты</label>
									<input asp-for="_cardModel.Number" id="cardNumber" onchange="formatCart(input)" oninput="formatCart(input)" placeholder="0000 0000 0000 0000" class="form-control" type="text" required />
									<span asp-validation-for="_cardModel.Number" id="cardNumberError" class="text-danger"></span>
								</div>
							</div>
							<div class="card-details">
								<div class="card-name">
									<img src="/Image/payment_systemMIR.png" />
								</div>
								<div class="expiration-date">
									<label>Срок</label>
									<input asp-for="_cardModel.ActivityDate" id="cardActivityDate" onchange="formatDate(inputDate)" oninput="formatDate(inputDate)" placeholder="MM/YY" class="form-control" type="text" required />
									<span asp-validation-for="_cardModel.ActivityDate" id="cardActivityDateError" class="text-danger"></span>
								</div>
							</div>
						</div>
						<div class="card-back">
							<div class="black-stripe"></div>
							<div class="cvc">
								<label asp-for="_cardModel.SVS_Code" class="control-label">CVC</label>
								<input asp-for="_cardModel.SVS_Code" id="cardCode" onchange="formatCode(inputCode)" oninput="formatCode(inputCode)" placeholder="000" class="form-control" type="text" required />
								<span asp-validation-for="_cardModel.SVS_Code" id="cardSVS_CodeError" class="text-danger"></span>
							</div>
						</div>
					</div>
					<div class="myRow">
						<div class="form-group">
							<label asp-for="targetSumm" class="control-label">Сумма</label>
							<input asp-for="targetSumm" id="summText" class="form-control" type="number" required />
							<span asp-validation-for="targetSumm" id="summTextError" class="text-danger"></span>
						</div>
						<button class="myButton" name="action" type="submit" value="btnBalans">Выполнить</button>
					</div>
					<div class="form-group">
						<input asp-for="isVuvod" class="form-control" type="number" id="popOperationType" />
					</div>
				</form>
				<form id="buyForm" onsubmit="return BuyFormValidation(event)" method="post">
					<div class="toolCard">
						<h1 id="popTitleBuy"></h1>
						<input style="visibility:hidden" id="targetId" />
						<div class="vitrinaImg">
							<img id="targetToolImg"/>
						</div>
						<label id="toolName"></label>
						<div class="form-group dataSlice">
							<label class="control-label"><strong id="peiceTool"></strong></label>
							<div class="myRow edit-gap">
								<div class="form-group">
									<label asp-for="targetSumm" id="edIzm" class="control-label"></label>
									<input asp-for="targetSumm" id="summOperation" class="form-control" type="number" required />
									<span asp-validation-for="targetSumm" id="summOperationError" class="text-danger"></span>
								</div>
								<label id="token" class="token"> ₽</label>
							</div>
							
							<label style="visibility:hidden" id="dostupSredstv"></label>
						</div>

						<button id="buyBtn" class="myButton" name="action" type="submit" value="btnBuy">Выполнить</button>
						<button id="sellBtn" style="display:none" class="myButton" name="action" type="submit" value="btnBuy">Выполнить</button>
					</div>
				</form>
			</div>
		</div>
	</section>
	<div id="vitrina" class="vitrina">
		<form class="search-menu" method="GET">
			<select name="paperType" aria-label="Категория">
				<option value="">Выберите тип</option>
				@if (Model.paperType == "Акция")
				{<option value="Акция" selected>Акция</option>}
				else{ <option value="Акция">Акция</option>}
				
				@if (Model.paperType == "Облигация")
				{<option value="Облигация" selected>Облигация</option>}
				else{<option value="Облигация">Облигация</option>}

				
				@if (Model.paperType == "Фонд")
				{<option value="Фонд" selected>Фонд</option>}
				else{<option value="Фонд">Фонд</option>}
				
			</select>

			<select name="brokerSelecter">
				<option value="0">Выберите брокера</option>
				@foreach (var broker in Model.brokersList)
				{
					if (Model.brokerSelecter == broker.Id)
					{
						<option value="@broker.Id" selected>@broker.NameBroker</option>
					}
					else
					{
						<option value="@broker.Id">@broker.NameBroker</option>
					}
				}
			</select>

			<input type="text" name="keyword" value="@Model.keyword" placeholder="Ключевое слово" />

			<button type="submit">Поиск</button>
		</form>
		<div class="tb_Box dop-overflou">
			<div class="fonzize-reg myRow tbCenter">

				@foreach (var item in Model.AllInvestToolsList)
				{
					<div class="toolCard">
						<h1 id="popTitleBuy"></h1>
						<div class="vitrinaImg">
							<img id="targetToolImg" src="data:image/png;base64, @item.ImageSource" />
						</div>

						<div class="form-group dataSlice">
							<label class="control-label">Цена: @item.Price ₽</label>
							<label id="toolName">@item.NameInvestTool</label>
						</div>

						<a class="myButton" onclick="buyOpen(@item.Id)">Купить</a>
					</div>
				}
			</div>
		</div>
	</div>
</div>

<script>
	$(document).ready(function ()
	{
			var hasErrors = @Html.Raw(Json.Serialize(Model.errorSupport));
			if(hasErrors == 1){
				openVuvod();
				showNotification('Недостаточно средств');
			}
			else if (hasErrors == 2){
				showNotification_positive('Операцйия проведена');
			}

	})

	let inputPhone = document.getElementById("portfile_phone");
	inputPhone.addEventListener("keyup", (e) => { formatinputPhone(e.target); });
	inputPhone.addEventListener("keypress", (e) => { formatinputPhone(e.target); });


	function formatinputPhone(inputPhone) {
		var input_val = inputPhone.value;
		if (input_val === "") { return; }
		var original_len = input_val.length;
		var caret_pos = inputPhone.selectionStart;
		input_val = input_val.replace(/\D/g, "");
		if (input_val.length > 0 && input_val[0] !== "7") {
			input_val = "7" + input_val;
		}
		if (input_val.length > 11) {
			input_val = input_val.substring(0, 11);
		}
		var formatted = "+";

		if (input_val.length > 0) {
			formatted += input_val[0];
		}
		if (input_val.length > 1) {
			formatted += " (" + input_val.substring(1, 4);
		}
		if (input_val.length >= 4) {
			formatted += ")";
		}
		if (input_val.length >= 4) {
			formatted += " " + input_val.substring(4, 7);
		}
		if (input_val.length >= 7) {
			formatted += "-" + input_val.substring(7, 9);
		}
		if (input_val.length >= 9) {
			formatted += "-" + input_val.substring(9, 11);
		}

		inputPhone.value = formatted;
		var updated_len = formatted.length;
		caret_pos = updated_len - original_len + caret_pos;
		if (caret_pos < 0) caret_pos = 0;
		inputPhone.setSelectionRange(caret_pos, caret_pos);


		if (input_val.length < 11) {
			inputPhone.style.borderBottom = '2px solid red';
		} else {
			inputPhone.style.borderBottom = '2px Solid black';
		}
	}

	let input = document.getElementById("cardNumber");
	input.addEventListener("keyup", (e) => { formatCart(e.target); });
	input.addEventListener("keypress", (e) => { formatCart(e.target); });

	let inputDate = document.getElementById("cardActivityDate");
	inputDate.addEventListener("keyup", (e) => { formatDate(e.target); });
	inputDate.addEventListener("keypress", (e) => { formatDate(e.target); });

	let inputCode = document.getElementById("cardCode");
	inputCode.addEventListener("keyup", (e) => { formatCode(e.target); });
	inputCode.addEventListener("keypress", (e) => { formatCode(e.target); });


	function formatCart(input) {
		var input_val = input.value;
		console.log('input.value: ', input.value);
		if (input_val === "") { return; }
		var original_len = input_val.length;
		var caret_pos = input.selectionStart;
		input_val = input_val.replace(/\D/g, "").replace(/\B(?=(\d{4})+(?!\d))/g, " ");
		input.value = input_val;
		var updated_len = input_val.length;
		caret_pos = updated_len - original_len + caret_pos;
		input.setSelectionRange(caret_pos, caret_pos);

		if(updated_len < 19) input.style.border = '2px solid red';
		else input.style.border = '0px';
	}
	function formatDate(inputDate) {
		var input_val = inputDate.value;
		if (input_val === "") { return; }
		var original_len = input_val.length;
		var caret_pos = inputDate.selectionStart;
		input_val = input_val.replace(/\D/g, "");
		if (input_val.length > 2) {
			input_val = input_val.substring(0, 2) + "/" + input_val.substring(2);
		}
		inputDate.value = input_val;
		var updated_len = input_val.length;
		caret_pos = updated_len - original_len + caret_pos;
		inputDate.setSelectionRange(caret_pos, caret_pos);

		if(inputDate.value.length < 5 || Number(inputDate.value.substring(0, 2)) > 12) inputDate.style.border = '2px solid red';
		else {
			var curentDate = new Date();
			var month = Number(inputDate.value.substring(0, 2)) - 1;
			var year = 2000 + Number(inputDate.value.substring(3, 5));

			var userDate = new Date(year, month);

			if(userDate < curentDate) inputDate.style.border = '2px solid red';
			else inputDate.style.border = '0px';
		}
	}

	function formatCode(inputCode) {
		var input_val = inputCode.value;
		if (input_val === "") { return; }
		var original_len = input_val.length;
		var caret_pos = inputCode.selectionStart;
		input_val = input_val.replace(/\D/g, "");

		inputCode.value = input_val;
		var updated_len = input_val.length;
		caret_pos = updated_len - original_len + caret_pos;
		inputDate.setSelectionRange(caret_pos, caret_pos);

		if(updated_len < 3) inputCode.style.border = '2px solid red';
		else inputCode.style.border = '0px';
	}

	function isValidMony()
	{
		let input = document.getElementById("cardNumber");
		let inputDate = document.getElementById("cardActivityDate");

		console.log(inputDate.value);

		let inputCode = document.getElementById("cardCode");
		let inputMony = document.getElementById("summText");

		if(input.value.length < 19){
			input.style.border = '2px solid red';
			return false;
		}
		else input.style.border = '0px';

		if(inputDate.value.length < 5 || Number(inputDate.value.substring(0, 2)) > 12) {
			inputDate.style.border = '2px solid red';
			return false;
		}
		else {
			var curentDate = new Date();
			var month = Number(inputDate.value.substring(0, 2)) - 1;
			var year = 2000 + Number(inputDate.value.substring(3, 5));

			console.log('month', month+1);
			console.log('year', year);

			var userDate = new Date(year, month);

			if(userDate < curentDate) {
				inputDate.style.border = '2px solid red';
				return false;
			}
			else inputDate.style.border = '0px';
			return true;
		}

		if(inputCode.value.length < 3) {
			inputCode.style.border = '2px solid red';
			return false;
		}
		else inputCode.style.border = '0px';

		if(inputMony.value.replace('0', '').length < 1 || Number(inputMony.value) < 1) {
			inputMony.style.borderBottom = '2px solid red';
			return false;
		}
		else inputMony.style.borderBottom = '2px Solid #000000';


		return true;
	}

	async function loadBalanceHistory(id_)
	{
		const baseUrl = '@Model.apiSettings.BaseUrl';
		const response = await fetch(baseUrl + 'User/LoadBalanceHistory', {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json'
			},
			body: JSON.stringify({ id: id_})
		});
		if (!response.ok) {
			console.log('Error: ', response.json());
			throw new Error('Network response was not ok');
		}
		const data = response.json();
		return data;

	}

	function createBalanceBlock(list){
		 const userList = document.getElementById('balanceHistoriBlock');
		 userList.innerHTML = '';

		 const historyLable = document.createElement('h1');
		 historyLable.textContent = 'История';
		 userList.appendChild(historyLable);

		 var oldDate = '';
		 var svFirst = 1;


		 list.forEach(Recorder => {
			 if(Number(Recorder.money).toFixed(2) !== '0.00') {
				  var hrBlock = document.createElement('hr');
				 var date = Recorder.date.split('T')[0];
				 if(svFirst == 1){

					 oldDate = Recorder.date.split('T')[0];
					 svFirst = 0;

					 var dateBlock1 = document.createElement('label');

					 dateBlock1.textContent = date;

					 userList.appendChild(hrBlock);
					 userList.appendChild(dateBlock1);
				 }

				 if(oldDate != date)
				 {
					 userList.appendChild(hrBlock);
					 var dateBlock = document.createElement('label');
					 dateBlock.textContent = date;
					 userList.appendChild(dateBlock);

					 oldDate = date
				 }


				 var operationType = '';
				 if(Number(Recorder.money) < 0 && Recorder.investToolsId != '0' ) operationType = 'Продажа';
				 else if(Number(Recorder.money) > 0 && Recorder.investToolsId != '0' ) operationType = 'Покупка';
				 else if(Number(Recorder.money) < 0 && Recorder.investToolsId == '0') operationType = 'Вывод средст';
				 else if(Number(Recorder.money) > 0 && Recorder.investToolsId == '0') operationType = 'Пополнение счета';

				 var sum = '';
				 var quentity1 = '';
				 if(Recorder.investToolsId != '0') {
					 sum = String((Number(Recorder.quentity) * Number(Recorder.money)).toFixed(2))+'₽';
					 quentity1 = Recorder.quentity + 'шт.';
				 }
				 else sum =  String(Number(Recorder.money).toFixed(2))+'₽';

				 const investToolNames = Recorder.investToolsId != '0'
											? Recorder.investTools.nameInvestTool
											: '';

				 const bDiv = document.createElement('div');
				 bDiv.classList.add('itemBalance');
				 bDiv.innerHTML = `<div class="myRow">
										<div class="bTitle"><strong>${operationType}</strong> ${investToolNames}</div>
										<div class="dataSlice">
											<label class="bTotalPrice">${sum}</label>
											<label class="bCounter">${quentity1}</label>
										</div>
									</div>`;
				 userList.appendChild(bDiv);
			 };

		});
	}

	async function OpenbalanceHistori() {
		var id_ = @Model.uId;
		var data = await loadBalanceHistory(id_);

		createBalanceBlock(data);

		profilOpen();

		document.getElementById('sideMenu').style.overflow = 'auto';
		document.getElementById('balanceHistoriBlock').style.display = 'block';
		document.getElementById('profile').style.display = 'none';
	}
</script>

@section Scripts {
	@{
		await Html.RenderPartialAsync("_ValidationScriptsPartial");
	}
}
