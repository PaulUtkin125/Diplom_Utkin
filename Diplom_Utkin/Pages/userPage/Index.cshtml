@page
@model Diplom_Utkin.Pages.userPage.IndexModel
@{
	ViewData["Title"] = "Кабинет";
}

<div class="window-box kabinet-box">
	@await Html.PartialAsync("Headers/_UserHeader")
	<section>
		<div id="overlay" class="overlay"></div>
		<div id="sideMenu" class="side-menu">
			<button class="myButton" onclick="profilClose()">Закрыть</button>
			<form id="profile" method="post">
				<div class="myRow">
					<div class="form-group">
						<label asp-for="_user.Loggin" class="control-label">E-mail</label>
						<input asp-for="_user.Loggin" class="form-control" id="portfile_mail" type="email" required disabled />

					</div>
					<div>
						<a onclick="updateLogin()"><img src="/Image/icon-edit.svg" /></a>

					</div>
				</div>
				<span asp-validation-for="_user.Loggin" class="text-danger"></span>

				<div class="myRow">
					<div class="form-group">
						<label asp-for="_user.Phone" class="control-label">Телефон</label>
						<input asp-for="_user.Phone" class="form-control" id="portfile_phone" type="tel" required disabled />

					</div>
					<div>
						<a onclick="updatePhone()"><img src="/Image/icon-edit.svg" /></a>

					</div>
				</div>
				<span asp-validation-for="_user.Phone" class="text-danger"></span>
				<button class="myButton" style="display:none" name="action" onclick="Update_Method_Profile()" id="portfile_save_btn" value="NoN">Сохранть</button>
			</form>
			<div id="balanceHistoriBlock" class="dataSlice balanceHistori"></div>
		</div>
		<div class="popup kabinetSupportBox">
			<div class="poputContent">
				<div class="top_">
					<div>
						<img onclick="closePopup()" src="/Image/krest.png" alt="Alternate Text" />
					</div>
				</div>
				<form id="myForm" method="post" onsubmit="return moneuBtn()">
					<h1 id="popTitle">Пополнение счета</h1>
					<div class="card">
						<div class="card-front">
							<div class="card-number">
								<div class="form-group">
									<label asp-for="_cardModel.Number" class="control-label">Номер карты</label>
									<input asp-for="_cardModel.Number" id="cardNumber" onchange="formatCart(input)" oninput="formatCart(input)" placeholder="0000 0000 0000 0000" class="form-control" type="text" required />
									<span asp-validation-for="_cardModel.Number" id="cardNumberError" class="text-danger"></span>
								</div>
							</div>
							<div class="card-details">
								<div class="card-name">
									<img src="/Image/payment_systemMIR.png"/>
								</div>
								<div class="expiration-date">
									<label>Срок</label>
									<input asp-for="_cardModel.ActivityDate" id="cardActivityDate" onchange="formatDate(inputDate)" oninput="formatDate(inputDate)" placeholder="MM/YY" class="form-control" type="text" required />
									<span asp-validation-for="_cardModel.ActivityDate" id="cardActivityDateError" class="text-danger"></span>
								</div>
							</div>
						</div>
						<div class="card-back">
							<div class="black-stripe"></div>
							<div class="cvc">
								<label asp-for="_cardModel.SVS_Code" class="control-label">CVC</label>
								<input asp-for="_cardModel.SVS_Code" id="cardCode" onchange="formatCode(inputCode)" oninput="formatCode(inputCode)" placeholder="000" class="form-control" type="text" required />
								<span asp-validation-for="_cardModel.SVS_Code" id="cardSVS_CodeError" class="text-danger"></span>
							</div>
						</div>
					</div>
					<div class="myRow">
						<div class="form-group">
							<label asp-for="targetSumm" class="control-label">Сумма</label>
							<input asp-for="targetSumm" id="summText" class="form-control" type="number" required />
							<span asp-validation-for="targetSumm" id="summTextError" class="text-danger"></span>
						</div>
						<button class="myButton" name="action" onclick="isValidMony()" type="submit" value="btnBalans">Выполнить</button>
					</div>
					<div class="form-group">
						<input asp-for="isVuvod" class="form-control" type="number" id="popOperationType" />
					</div>
				</form>

				@* //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// *@

				<form id="buyForm" method="post" onsubmit="return BuyFormValidation()">
					<h1 id="popTitleBuy"></h1>
					<input style="visibility:hidden" id="targetId" disabled/>
					<div class="form-group myRow">
						<div class="hd-imgBlock">
							<img id="targetToolImg"/>
						</div>
						<label id="toolName"></label>
					</div>

					<div class="form-group myRow">
						<input id="peiceTool" disabled/>
					</div>

					<div class="myRow">
						<div class="form-group">
							<label asp-for="targetSumm" id="edIzm" class="control-label"></label>
							<input asp-for="targetSumm" id="summOperation" class="form-control" type="number" required />
							<span asp-validation-for="targetSumm" id="summOperationError" class="text-danger"></span>
						</div>
						<div class="form-group">
							<label id="dostupSredstv"></label>
						</div>
					</div>
					<button id="buyBtn" class="myButton" name="action" type="submit" value="btnBuy">Выполнить</button>
					<button id="sellBtn" style="display:none" class="myButton" name="action" type="submit" value="btnBuy">Выполнить</button>
				</form>

				@* //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// *@

			</div>
		</div>

	</section>
	<div id="portfel-block">
		<div class="informations d-inline-flex">
			<div>
				<h1>Структура портфеля</h1>
				<canvas id="myPieChart" width="700" height="500"></canvas>

				<script>
					var ctx = document.getElementById('myPieChart').getContext('2d');

					var myPieChart = new Chart(ctx, {
						type: 'pie',
						data: {
							labels: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.chartName)), // Укажите свои метки
							datasets: [{
								// label: 'Примечание',
								data: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.chartData)), // Укажите данные для каждой категории

							}]
						},
						options: {
							animation: {
								duration: 0 // Отключаем анимацию
							},
							responsive: true,
							plugins: {
								legend: {
									position: 'right',
									labels: {
										font:{
											size:18
										}
									}
								}
							}
						}
					});
				</script>
			</div>

			<div class="d-inline-flex salery-box">
				<div class="raschotBox">
					<form action="#" method="get">
						<div class="d-inline-flex">
							<h1>Рассчитать доходность</h1>
							<div class="form-group">
								<label asp-for="startDate" class="control-label">От</label>
								<input asp-for="startDate" id="startDate" class="form-control" type="date" value="@DateTime.Now" required />
								<span asp-validation-for="startDate" id="StartDateError" class="text-danger"></span>
							</div>
							<div class="form-group">
								<label asp-for="endDate" class="control-label">До</label>
								<input asp-for="endDate" id="endDate" class="form-control" type="date" value="@DateTime.Now" required />
								<span asp-validation-for="endDate" id="endDateError" class="text-danger"></span>
							</div>
							<div class="form-group">
								<button class="myButton" name="action" type="submit" value="raschot_Btn">Рассчитать</button>
							</div>
						</div>
					</form>
					<div>
						<h1>Прибыль:</h1>
						<div class="priblValue">
							<label asp-for="Pribl" class="control-label">@Model.Pribl</label>
							<span asp-validation-for="Pribl" class="text-danger"></span>
						</div>
					</div>

				</div>
			</div>
		</div>


		<div class="tb_Box">
			<h1>Инструменты</h1>
			<table class="table">
				<thead>
					<tr>
						<th>
							Иконка
						</th>
						<th>
							<a asp-route-sortOrder="@Model.sortName">
								Название
							</a>
						</th>
						<th>
							<a asp-route-sortOrder="@Model.sortSum">
								Стоимость
							</a>
						</th>
						<th>
							Действие
						</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var item in Model.InvestToolsList)
					{
						<tr>
							<td>
								<div class="hd-imgBlock settings">
									<img src="data:image/png;base64, @item.InvestTool.ImageSource" />
								</div>
							</td>
							<td>
								@Html.DisplayFor(modelItem => item.InvestTool.NameInvestTool)
							</td>
							<td>
								@Html.DisplayFor(modelItem => item.AllManey) ₽
							</td>
							<td class="tbColCenter">
								@if (!item.InvestTool.isFrozen)
								{
									<a onclick="buyOpen(@item.InvestTool.Id)">Докупить</a>
									<span> | </span>
									<a onclick="sellOpen(@item.InvestTool.Id, @item.Quentity)"> Продать </a>
								}
								else
								{
									<text>
										Заморожен
									</text>
								}

							</td>


						</tr>
					}
				</tbody>
			</table>
		</div>
	</div>
	
</div>

<script>
	let input = document.getElementById("cardNumber");
	input.addEventListener("keyup", (e) => { formatCart(e.target); });
	input.addEventListener("keypress", (e) => { formatCart(e.target); });

	let inputDate = document.getElementById("cardActivityDate");
	inputDate.addEventListener("keyup", (e) => { formatDate(e.target); });
	inputDate.addEventListener("keypress", (e) => { formatDate(e.target); });

	let inputCode = document.getElementById("cardCode");
	inputCode.addEventListener("keyup", (e) => { formatCode(e.target); });
	inputCode.addEventListener("keypress", (e) => { formatCode(e.target); });


	function formatCart(input) {
		var input_val = input.value;
		console.log('input.value: ', input.value);
		if (input_val === "") { return; }
		var original_len = input_val.length;
		var caret_pos = input.selectionStart;
		input_val = input_val.replace(/\D/g, "").replace(/\B(?=(\d{4})+(?!\d))/g, " ");
		input.value = input_val;
		var updated_len = input_val.length;
		caret_pos = updated_len - original_len + caret_pos;
		input.setSelectionRange(caret_pos, caret_pos);

		if(updated_len < 19) input.style.border = '2px solid red';
		else input.style.border = '0px';
	}
	function formatDate(inputDate) {
		var input_val = inputDate.value;
		if (input_val === "") { return; }
		var original_len = input_val.length;
		var caret_pos = inputDate.selectionStart;
		input_val = input_val.replace(/\D/g, "");
		if (input_val.length > 2) {
			input_val = input_val.substring(0, 2) + "/" + input_val.substring(2);
		}
		inputDate.value = input_val;
		var updated_len = input_val.length;
		caret_pos = updated_len - original_len + caret_pos;
		inputDate.setSelectionRange(caret_pos, caret_pos);

		if(inputDate.value.length < 5 || Number(inputDate.value.substring(0, 2)) > 12) inputDate.style.border = '2px solid red';
		else {
			var curentDate = new Date();
			var month = Number(inputDate.value.substring(0, 2)) - 1;
			var year = 2000 + Number(inputDate.value.substring(3, 5));

			var userDate = new Date(year, month);

			if(userDate < curentDate) inputDate.style.border = '2px solid red';
			else inputDate.style.border = '0px';
		}
	}

	function formatCode(inputCode) {
		var input_val = inputCode.value;
		if (input_val === "") { return; }
		var original_len = input_val.length;
		var caret_pos = inputCode.selectionStart;
		input_val = input_val.replace(/\D/g, "");

		inputCode.value = input_val;
		var updated_len = input_val.length;
		caret_pos = updated_len - original_len + caret_pos;
		inputDate.setSelectionRange(caret_pos, caret_pos);

		if(updated_len < 3) inputCode.style.border = '2px solid red';
		else inputCode.style.border = '0px';
	}

	function isValidMony()
	{
		let input = document.getElementById("cardNumber");
		let inputDate = document.getElementById("cardActivityDate");
		let inputCode = document.getElementById("cardCode");
		let inputMony = document.getElementById("summText");

		if(input.value.length < 19) input.style.border = '2px solid red';
		else input.style.border = '0px';

		if(inputDate.value.length < 5 || Number(inputDate.value.substring(0, 2)) > 12) inputDate.style.border = '2px solid red';
		else {
			var curentDate = new Date();
			var month = Number(inputDate.value.substring(0, 2)) - 1;
			var year = 2000 + Number(inputDate.value.substring(3, 5));

			console.log('month', month+1);
			console.log('year', year);

			var userDate = new Date(year, month);

			if(userDate < curentDate) inputDate.style.border = '2px solid red';
			else inputDate.style.border = '0px';
		}

		if(inputCode.value.length < 3) inputCode.style.border = '2px solid red';
		else inputCode.style.border = '0px';

		if(inputMony.value.replace('0', '').length < 1 || Number(inputMony.value) < 1) inputMony.style.borderBottom = '2px solid red';
		else inputMony.style.borderBottom = '2px Solid #000000';
	}


	async function OpenbalanceHistori() {
		var id_ = @Model.uId;
		var data = await loadBalanceHistory(id_);

		createBalanceBlock(data);

		profilOpenBase();

		document.getElementById('balanceHistoriBlock').style.display = 'block';
		document.getElementById('profile').style.display = 'none';
	}

	async function loadBalanceHistory(id_)
	{
		const baseUrl = '@Model.apiSettings.BaseUrl';
		const response = await fetch(baseUrl + 'User/LoadBalanceHistory', {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json'
			},
			body: JSON.stringify({ id: id_})
		});
		if (!response.ok) {
			console.log('Error: ', response.json());
			throw new Error('Network response was not ok');
		}
		const data = response.json();
		return data;
		
	}

	function createBalanceBlock(list){
		 const userList = document.getElementById('balanceHistoriBlock');


		 list.forEach(Recorder => {
			 var date = Recorder.date.split('T')[0];
			 var operationType = '';
			 if(Number(Recorder.money) < 0 && Recorder.investToolsId != '0' ) operationType = 'Продажа';
			 else if(Number(Recorder.money) > 0 && Recorder.investToolsId != '0' ) operationType = 'Покупка';
			 else if(Number(Recorder.money) < 0 && Recorder.investToolsId == '0') operationType = 'Вывод средст';
			 else if(Number(Recorder.money) > 0 && Recorder.investToolsId == '0') operationType = 'Пополнение счета';
			 
			 var sum = '';
			 var quentity1 = '';
			 if(Recorder.investToolsId != '0') {
				 sum = String((Number(Recorder.quentity) * Number(Recorder.money)).toFixed(2))+'₽';
				 quentity1 = Recorder.quentity + 'шт.';
			 }
			 else sum =  String(Number(Recorder.money).toFixed(2))+'₽';

			 const investToolNames = Recorder.investToolsId != '0'
										? Recorder.investTools.nameInvestTool
										: '';

			 const bDiv = document.createElement('div');
			 bDiv.classList.add('itemBalance');
			 bDiv.innerHTML = `<label>${date}</label>
								<div class="myRow">
									<div class="bTitle">${operationType} ${investToolNames}</div>
									<div class="dataSlice">
										<label class="bTotalPrice">${sum}</label>
										<label class="bCounter">${quentity1}</label>
									</div>
								</div>`;
			 userList.appendChild(bDiv);
		 });
	}

</script>

@section Scripts {
	@{
		await Html.RenderPartialAsync("_ValidationScriptsPartial");
	}
}
