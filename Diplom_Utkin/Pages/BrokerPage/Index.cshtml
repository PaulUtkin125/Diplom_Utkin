@page
@model Diplom_Utkin.Pages.BrokerPage.IndexModel
@{
	ViewData["Title"] = "Кабинет";
}
<div class="window-box kabinet-box kabinetHeight">
	@await Html.PartialAsync("Headers/_BrokerHeader")
	<header>
		<nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light border-bottom box-shadow mb-3">
			<div class="container">
				<div class="hd-imgBlock">
					<a asp-page="/BrokerPage/Index">
						<img src="/Image/mainIcon2.png" alt="Alternate Text" />
					</a>

				</div>
				<button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
						aria-expanded="false" aria-label="Toggle navigation">
					<span class="navbar-toggler-icon"></span>
				</button>
				<div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
					<ul class="navbar-nav">
						<li style="width:max-content; align-self:center;margin-left:15px;">
							@Model._user.NameBroker
						</li>
					</ul>
					<ul class="navbar-nav">

						<li class="nav-item myItem">
							<a class="nav-link" onclick="profilOpen()">
								<div class="hd-imgBlock settings">
									<img src="/Image/Profil.png" alt="Alternate Text" />
								</div>
							</a>
						</li>
						<li class="nav-item myItem">

							<a class="nav-link" href="#" onclick="vuhodOnStart(event)">Выйти</a>
						</li>
					</ul>
				</div>
			</div>
		</nav>
	</header>
	<div id="notification-container"></div>
	<section>
		<div id="overlay" class="overlay"></div>
		<div id="sideMenu" class="side-menu">
			<h1>Профиль</h1>
			<form method="post" onsubmit="return Update_Method_Profile(event)">
				<div class="form-group myRow">
					<div class="hd-imgBlock settings">
						<img src="data:image/png;base64, @Model._user.SourseFile" />
					</div>
				</div>
				<div class="myRow">
					<div class="form-group">
						<label asp-for="_user.NameBroker" class="control-label">Название</label>
						<input asp-for="_user.NameBroker" class="form-control" id="portfile_Name" type="text" required disabled />

					</div>
					<div>
						<a onclick="updateName()"><img class="svgEdit" src="/Image/icon-edit.svg" /></a>

					</div>
				</div>
				<span asp-validation-for="_user.NameBroker" class="text-danger"></span>

				<div class="myRow">
					<div class="form-group">
						<label asp-for="_user.Email" class="control-label">E-mail</label>
						<input asp-for="_user.Email" class="form-control" id="portfile_mail" type="email" required disabled />

					</div>
					<div>
						<a onclick="updateLogin()"><img class="svgEdit" src="/Image/icon-edit.svg" /></a>
					</div>
				</div>
				<span asp-validation-for="_user.Email" class="text-danger"></span>

				<div class="myRow">
					<div class="form-group">
						<label asp-for="_user.Phone" class="control-label">Телефон</label>
						<input asp-for="_user.Phone" class="form-control" id="portfile_phone" type="tel" required disabled />
					</div>
					<div>
						<a onclick="updatePhone()"><img class="svgEdit" src="/Image/icon-edit.svg" /></a>
					</div>
				</div>
				<span asp-validation-for="_user.Phone" id="profilePhoneError" class="text-danger"></span>

				<div class="myRow">
					<div class="form-group">
						<label asp-for="_user.INN" class="control-label">ИНН</label>
						<input asp-for="_user.INN" class="form-control" id="portfile_INN" type="text" required disabled />
					</div>
				</div>
				<button class="myButton" style="display:none" name="action" id="portfile_save_btn" value="NoN">Сохранть</button>
			</form>
		</div>
		<div id="popup" class="popup kabinetSupportBox">
			<div class="poputContent">
				<div class="top_">
					<div>
						<img onclick="closePopup()" src="/Image/krest.png" alt="Alternate Text" />
					</div>
				</div>

				@* //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// *@

				<form id="optionForm" method="post">
					<h1>Детали</h1>
					<input style="visibility:hidden" id="targetId" type="number" />
					<div class="form-group myRow">
						<div class="hd-imgBlock">
							<img id="targetBrokerImg" />
						</div>
						<label type="text" id="BrokerName"/>
					</div>
					<div class="dataSlice">
						<label id="targetToolPrice" type="number"/>
					</div>
					<div class="myRow">
						<button class="myButton" onclick="editFormOpen(event)">Изменить</button>
						<button class="myButton" name="action" type="submit" id="restoreBtn" value="restore_btn">Разархивировать</button>
						<button class="myButton" name="action" type="submit" id="deleteBtn" value="negative_btn">Заархивировать</button>
					</div>
				</form>

				@* //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// *@

				<form id="CreateForm" onsubmit="return validationCreateTool(event)" method="post">
					<h1>Добавить</h1>

					<div class="dataSlice">
						<div class="form-group">
							<label class="control-label">Выберите иконку</label>
							<input asp-for="investTool.file" class="form-control" type="file" accept=".jpg, .jpeg, .png" id="ToolImgCreate" required />
							<span asp-validation-for="investTool.file" id="iconErrorBox" class="text-danger"></span>
						</div>
						<div class="form-group">
							<label class="control-label">Название</label>
							<input asp-for="investTool.NameInvestTool" class="form-control" type="text" id="ToolNameCreate" required />
							<span asp-validation-for="investTool.NameInvestTool" id="nameToolErrorBox" class="text-danger"></span>
						</div>
						<div class="form-group">
							<label class="control-label">Стартовая цена (за единицу)</label>
							<select asp-for="investTool.TypeTool" id="toolTypeSelect">
								<option value="0">Выберите тип</option>
								<option value="Акция">Акция</option>
								<option value="Облигация">Облигация</option>
								<option value="Фонд">Фонд</option>

							</select>
							<span id="toolTypeSelectError" class="text-danger"></span>
						</div>
						
						<div class="myRow edit-gap">
							<div class="form-group">
								<label class="control-label">Стартовая цена (за единицу)</label>
								<input asp-for="investTool.Price" class="form-control" type="number" maxlength="10" id="startPriceCreate" required />
								<span asp-validation-for="investTool.Price" id="startPriceError" class="text-danger"></span>
							</div>
							<label class="token"> ₽</label>
						</div>
					</div>

					<div class="myRow">
						<button class="myButton" type="submit" name="action" value="create">Добавить</button>
					</div>
				</form>

				@* //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// *@

				<form id="EditForm" onsubmit="return validationEditTool(event)" method="post">
					<h1>Редактирование</h1>
					<input style="visibility:hidden" id="targetIdEdit" type="number" />
					<div class="dataSlice">
						<div class="form-group">
							<label class="control-label">Выберите иконку</label>
							<input class="form-control" type="file" accept=".jpg, .jpeg, .png" id="ToolImgEdit" />
							<span class="text-danger"></span>
						</div>
						<div class="form-group">
							<label class="control-label">Название</label>
							<input asp-for="investTool.NameInvestTool" class="form-control" type="text" id="ToolNameEdit" />
							<span asp-validation-for="investTool.NameInvestTool" id="toolNameEdit" class="text-danger"></span>
						</div>
						<div class="myRow edit-gap">
							<div class="form-group">
								<label class="control-label">Стартовая цена (за единицу)</label>
								<input class="form-control" type="number" id="ToolPriceEdit" disabled />
								<span class="text-danger"></span>
							</div>
							<label class="token"> ₽</label>
						</div>

					</div>

					<div class="myRow">
						<button class="myButton" type="submit" name="action" value="NoN">Сохранить</button>
					</div>
				</form>

			</div>
		</div>
	</section>

	<div class="myRow space-between">
		<div class="dataSlice">
			<label>Инструментов в управлении: @Model.InvestTools.Count()</label>
		</div>
		<a onclick="CreateForm_Open()" class="myButton-support control-width">
			Добавить
		</a>
	</div>


	<div class="myRow tb_header space-between">
		<h1>Инструменты</h1>
		

		<div class="search-container text-center">
			<form method="get">
				<div class="input-group">
					<input type="text" name="query" class="form-control search-input" placeholder="Вводить название бумаги" value="@Model.Query" />
					<input type="hidden" name="sortOrder" value="@Model.CurrnerSort" />
					<div class="input-group-append">
						<button type="submit" class="btn btn-primary search-button">Поиск</button>
					</div>
				</div>
			</form>
		</div>
	</div>

	<div class="tb_Box">
		<table class="table">
			<thead>
				<tr>
					<th>
						Иконка
					</th>
					<th>
						<a asp-route-sortOrder="@Model.sortName" asp-route-Query="@Model.Query">
							Название
						</a>
					</th>
					<th>
						<a asp-route-sortOrder="@Model.sortType" asp-route-Query="@Model.Query">
							Тип
						</a>
					</th>
					<th>
						<a asp-route-sortOrder="@Model.sortIsClosing" asp-route-Query="@Model.Query">
							Закрыт
						</a>
					</th>
					<th>
						Действие
					</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var item in Model.InvestTools)
				{
					<tr>
						<td>
							<div class="hd-imgBlock settings">
								<img src="data:image/png;base64, @item.ImageSource" />
							</div>
						</td>
						<td>
							@Html.DisplayFor(modelItem => item.NameInvestTool)
						</td>
						<td>
							@Html.DisplayFor(modelItem => item.TypeTool)
						</td>
						<td>
							@{
								if (item.isClosed)
								{
									<text>Да</text>
								}
								else
								{
									<text>Нет</text>
								}

							}
						</td>
						<td class="tbColCenter">
							<form method="post">
								<input name="toolid_sup" value="@item.Id" style="display:none" />
								<button onclick="EditFormFastOpen(@item.Id, event)" type="submit" name="action" value="NoN">Редактировать</button>
								<span>|</span>
								@if (item.isClosed)
								{
									<button type="submit" name="action" value="restoreBtn">Разархивировать</button>
									<span>|</span>
								}
								else
								{
									<button type="submit" name="action" value="deleteToolFast">Заархивировать</button>
								}
							</form>
						</td>
					</tr>
				}
				
				
			</tbody>
		</table>
	</div>
</div>

<script>


	let inputPhone = document.getElementById("portfile_phone");
	inputPhone.addEventListener("keyup", (e) => { formatinputPhone(e.target); });
	inputPhone.addEventListener("keypress", (e) => { formatinputPhone(e.target); });
	function formatinputPhone(inputPhone) {
		var input_val = inputPhone.value;
		if (input_val === "") { return; }
		var original_len = input_val.length;
		var caret_pos = inputPhone.selectionStart;
		input_val = input_val.replace(/\D/g, "");
		if (input_val.length > 0 && input_val[0] !== "7") {
			input_val = "7" + input_val;
		}
		if (input_val.length > 11) {
			input_val = input_val.substring(0, 11);
		}
		var formatted = "+";

		if (input_val.length > 0) {
			formatted += input_val[0];
		}
		if (input_val.length > 1) {
			formatted += " (" + input_val.substring(1, 4);
		}
		if (input_val.length >= 4) {
			formatted += ")";
		}
		if (input_val.length >= 4) {
			formatted += " " + input_val.substring(4, 7);
		}
		if (input_val.length >= 7) {
			formatted += "-" + input_val.substring(7, 9);
		}
		if (input_val.length >= 9) {
			formatted += "-" + input_val.substring(9, 11);
		}

		inputPhone.value = formatted;
		var updated_len = formatted.length;
		caret_pos = updated_len - original_len + caret_pos;
		if (caret_pos < 0) caret_pos = 0;
		inputPhone.setSelectionRange(caret_pos, caret_pos);


		if (input_val.length < 11) {
			inputPhone.style.borderBottom = '2px solid red';
		} else {
			inputPhone.style.borderBottom = '2px Solid black';
		}
	}

	/////////////////////////////////////////////////////////////////
	// document.getElementById('CreateForm').addEventListener('submit', async function(event) {
	// 	event.preventDefault();

	// 	let isValid = await validationCreateTool(event);

	// 	if(isValid){
	// 		event.target.submit();
	// 	}
	// });
	////////////////////////////////////////////////////////////////

	async function validationCreateTool(event){
		event.preventDefault();

		let startPrice = document.getElementById('startPriceCreate');
		let typeToolCreate = document.getElementById('toolTypeSelect');
		let toolTypeSelectError = document.getElementById('toolTypeSelectError');


		var iconErrorBox = document.getElementById('iconErrorBox').textContent;
		if(iconErrorBox.length > 3) return false;

		var nameToolCreateBox = document.getElementById('ToolNameCreate');
		if(nameToolCreateBox.value == '' || nameToolCreateBox.value.length < 5 ) {
			nameToolCreateBox.style.borderBottom = '2px solid red';
			return false
		}
		else  nameToolCreateBox.style.borderBottom = '0';



		if(startPrice.value < 1){
			startPrice.style.borderBottom = '2px solid red';
			showNotification('Указана некоректная цена!');
			return false;
		}
		else{
			startPrice.style.borderBottom = '0';
		}

		console.log('typeToolCreate.value: ', typeToolCreate.value)

		if(String(typeToolCreate.value) == '0')
		{
			typeToolCreate.borderBottom = '2px solid red';
			showNotification('укажите тип ценной бумаги');
			toolTypeSelectError.textContent = 'Выберите тип!';
			return false;
		}
		else{
			toolTypeSelectError.textContent = '';
			typeToolCreate.borderBottom = '0';
		}

		var name1 = document.getElementById('ToolNameCreate').value;
		var file = document.getElementById('ToolImgCreate').files[0];
		var price = String(document.getElementById('startPriceCreate').value);
		var bId = String(@Model.brokerId);

		console.log('file', file);
		console.log('BrokersId', bId);
		console.log('NameInvestTool', name1);
		console.log('Price', price);

		var errorBox = document.getElementById('nameToolErrorBox').textContent.trim();
		console.log('errorBox: ', errorBox);

		if(errorBox.length > 5) return;
		console.log('errorBox1: ', errorBox);
		var data = await createTool(file, name1, price, bId, typeToolCreate.value );

		
		showNotification_positive('Бумага добавлена');
		setTimeout(() => { event.target.submit();}, 3000);
	}

	async function createTool(file, name, price, bId, typeToolCreate ){
		try{
			const formData = new FormData();
			formData.append('file', file);
			formData.append('BrokersId', bId);
			formData.append('NameInvestTool', name);
			formData.append('Price', price);
			formData.append('TypeTool', typeToolCreate);


			const baseUrl = '@Model.apiSettings.BaseUrl';
			const response = await fetch(baseUrl + 'Broker/CreateTool', {
				method: 'PUT',
				body: formData
			});
			if (!response.ok) {
					throw new Error('Network response was not ok');
			}
		}
		catch(error) {
			console.error('There was a problem with the fetch operation:', error);
		}
	}

	async function validationEditTool(event)
	{
		event.preventDefault();
		let startPrice = document.getElementById('ToolPriceEdit');


		if(startPrice.value < 1){
			startPrice.style.borderBottom = '2px solid red';
			return false;
		}
		else{
			startPrice.style.borderBottom = '0';
		}

		var name = document.getElementById('ToolNameEdit').value;
		var file = document.getElementById('ToolImgEdit').files[0];
		var price = Number(document.getElementById('ToolPriceEdit').value);
		var tId = document.getElementById('targetIdEdit').value;

		console.log('file', file);
		console.log('id', tId);
		console.log('name', name);
		console.log('price', price);

		var errorBox = document.getElementById('toolNameEdit').textContent;

		if(errorBox != ''|| errorBox != null) return;

		var data = await editTool(file, name, price, tId );


		event.target.submit();
	}

	async function editTool(file, name, price, tId ){
		try{
			const formData = new FormData();
			formData.append('file', file);
			formData.append('id', tId);
			formData.append('name', name);
			formData.append('price', price);


			const baseUrl = '@Model.apiSettings.BaseUrl';
			const response = await fetch(baseUrl + 'Broker/UpdateTool', {
				method: 'PATCH',
				body: formData
			});
			if (!response.ok) {
					throw new Error('Network response was not ok');
			}
		}
		catch(error) {
			console.error('There was a problem with the fetch operation:', error);
		}
	}

	async function deleteTool()
	{
		var id_ = document.getElementById('targetId').value;
		await deleteToolMethod(id_);
	}

	async function fastDeleteTool(id_, event){
		event.preventDefault();
		await deleteToolMethod(id_);

		event.target.submit();

	}

	async function deleteToolMethod(id_){
		try{
			const baseUrl = '@Model.apiSettings.BaseUrl';
			const response = await fetch(baseUrl + 'Broker/DeleteTool', {
				method: 'PATCH',
				headers: {
				'Content-Type': 'application/json'
				},
				body: JSON.stringify({ id: id_ })
			});
			if (!response.ok) {
					throw new Error('Network response was not ok');
			}
		}
		catch(error) {
			console.error('There was a problem with the fetch operation:', error);
		}
	}
</script>