@page
@model Diplom_Utkin.Pages.BrokerPage.IndexModel
@{
	ViewData["Title"] = "Кабинет";
}
<div class="window-box kabinet-box">
	@await Html.PartialAsync("Headers/_BrokerHeader")

	<section>
		<div id="overlay" class="overlay"></div>
		<div id="sideMenu" class="side-menu">
			<button class="myButton" onclick="profilClose()">Закрыть</button>
			<form method="post">
				<div class="form-group myRow">
					<div class="hd-imgBlock settings">
						<img src="data:image/png;base64, @Model._user.SourseFile" />
					</div>
					<div>
						<a onclick="updateLogin()"><img src="/Image/icon-edit.svg" /></a>
					</div>
				</div>
				<div class="myRow">
					<div class="form-group">
						<label asp-for="_user.NameBroker" class="control-label">Название</label>
						<input asp-for="_user.NameBroker" class="form-control" id="portfile_Name" type="text" required disabled />

					</div>
					<div>
						<a onclick="updateName()"><img src="/Image/icon-edit.svg" /></a>

					</div>
				</div>
				<span asp-validation-for="_user.NameBroker" class="text-danger"></span>

				<div class="myRow">
					<div class="form-group">
						<label asp-for="_user.Email" class="control-label">E-mail</label>
						<input asp-for="_user.Email" class="form-control" id="portfile_mail" type="email" required disabled />

					</div>
					<div>
						<a onclick="updateLogin()"><img src="/Image/icon-edit.svg" /></a>

					</div>
				</div>
				<span asp-validation-for="_user.Email" class="text-danger"></span>

				<div class="myRow">
					<div class="form-group">
						<label asp-for="_user.Phone" class="control-label">Телефон</label>
						<input asp-for="_user.Phone" class="form-control" id="portfile_phone" type="tel" required disabled />

					</div>
					<div>
						<a onclick="updatePhone()"><img src="/Image/icon-edit.svg" /></a>

					</div>
				</div>
				<span asp-validation-for="_user.Phone" class="text-danger"></span>

				<div class="myRow">
					<div class="form-group">
						<label asp-for="_user.INN" class="control-label">ИНН</label>
						<input asp-for="_user.INN" class="form-control" id="portfile_INN" type="text" required disabled />

					</div>
				</div>
				<button class="myButton" style="display:none" name="action" onclick="Update_Method_Profile()" id="portfile_save_btn" value="NoN">Сохранть</button>
			</form>
		</div>
		<div id="popup" class="popup kabinetSupportBox">
			<div class="poputContent">
				<div class="top_">
					<div>
						<img onclick="closePopup()" src="/Image/krest.png" alt="Alternate Text" />
					</div>
				</div>

				@* //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// *@

				<form id="optionForm" method="post">
					<h1>Детали</h1>
					<input style="visibility:hidden" id="targetId" type="number" />
					<div class="form-group myRow">
						<div class="hd-imgBlock">
							<img id="targetBrokerImg" />
						</div>
						<label type="text" id="BrokerName"/>
					</div>
					<div class="dataSlice">
						<label id="targetToolPrice" type="number"/>
					</div>
					<div class="myRow">
						<button class="myButton" onclick="editFormOpen(event)">Изменить</button>
						<button class="myButton" name="action" type="submit" value="negative_btn">Удалить</button>
					</div>
				</form>

				@* //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// *@
				
				<form id="CreateForm" onsubmit="return validationCreateTool(event)" method="post">
					<h1>Добавить</h1>

					<div class="dataSlice">
						<div class="form-group">
							<label class="control-label">Выберите иконку</label>
							<input class="form-control" type="file" accept=".jpg, .jpeg, .png" id="ToolImgCreate" required />
							<span class="text-danger"></span>
						</div>
						<div class="form-group">
							<label class="control-label">Название</label>
							<input class="form-control" type="text" id="ToolNameCreate" required />
							<span class="text-danger"></span>
						</div>
						<div class="form-group">
							<label class="control-label">Стартовая цена (за единицу)</label>
							<input class="form-control" type="number" maxlength="10" id="startPriceCreate" required />
							<span id="startPriceError" class="text-danger"></span>
						</div>

					</div>

					<div class="myRow">
						<button class="myButton" type="submit" name="action" value="create">Добавить</button>
						<button class="myButton" onclick="closePopup()" name="action" value="NoN">Отменить</button>
					</div>
				</form>

				@* //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// *@
				
				<form id="EditForm" onsubmit="return validationEditTool(event)" method="post">
					<h1>Редактирование</h1>
					<input style="visibility:hidden" id="targetIdEdit" type="number" />
					<div class="dataSlice">
						<div class="form-group">
							<label class="control-label">Выберите иконку</label>
							<input class="form-control" type="file" accept=".jpg, .jpeg, .png" id="ToolImgEdit" />
							<span class="text-danger"></span>
						</div>
						<div class="form-group">
							<label class="control-label">Название</label>
							<input class="form-control" type="text" id="ToolNameEdit" />
							<span class="text-danger"></span>
						</div>
						<div class="form-group">
							<label class="control-label">Стартовая цена (за единицу)</label>
							<input class="form-control" type="number" id="ToolPriceEdit" disabled />
							<span id="startPriceError" class="text-danger"></span>
						</div>

					</div>

					<div class="myRow">
						<button class="myButton" type="submit" name="action" value="NoN">Сохранить</button>
						<button class="myButton" onclick="closePopup()" name="action" value="NoN">Отменить</button>
					</div>
				</form>

			</div>
		</div>
	</section>

	<div class="myRow space-between">
		<div class="dataSlice">
			<label>Инструментов в управлении: @Model.InvestTools.Count()</label>
		</div>
		<a onclick="CreateForm_Open()">
			Добавить
		</a>
	</div>


	<div class="tb_Box">
		<h1>Инструменты</h1>
		<table class="table">
			<thead>
				<tr>
					<th>
						Иконка
					</th>
					<th>
						<a>
							Название
						</a>
					</th>
					<th>
						<a>
							Закрыт
						</a>
					</th>
					<th>
						<a>
							Заморожен
						</a>
					</th>
					<th>
						Действие
					</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var item in Model.InvestTools)
				{
					<tr>
						<td>
							<div class="hd-imgBlock settings">
								<img src="data:image/png;base64, @item.ImageSource" />
							</div>
						</td>
						<td>
							@Html.DisplayFor(modelItem => item.NameInvestTool)
						</td>
						<td>
							@{
								if (item.isClosed)
								{
									<text>Да</text>
								}else
								{
									<text>Нет</text>
								}

							}
							
						</td>
						<td>
							@{
								if (item.isFrozen)
								{
									<text>Да</text>
								}
								else
								{
									<text>Нет</text>
								}

							}
						</td>
						<td class="tbColCenter">
							<form method="post">
								<button onclick="EditFormFastOpen(@item.Id, event)" type="submit" name="action" value="NoN">Редактировать</button>
								<span>|</span>
								<button onclick="fastDeleteTool(@item.Id)" type="submit" name="action" value="NoN">Зархивировать</button>
							</form>
							<a onclick="optionFormOpen(@item.Id)">Детали</a>
						</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
</div>

<script>

	let inputPhone = document.getElementById("portfile_phone");
	inputPhone.addEventListener("keyup", (e) => { formatinputPhone(e.target); });
	inputPhone.addEventListener("keypress", (e) => { formatinputPhone(e.target); });


	function formatinputPhone(inputPhone) {
		var input_val = inputPhone.value;
		if (input_val === "") { return; }
		var original_len = input_val.length;
		var caret_pos = inputPhone.selectionStart;
		input_val = input_val.replace(/\D/g, "");
		if (input_val.length > 0 && input_val[0] !== "7") {
			input_val = "7" + input_val;
		}
		if (input_val.length > 11) {
			input_val = input_val.substring(0, 11);
		}
		var formatted = "+";

		if (input_val.length > 0) {
			formatted += input_val[0];
		}
		if (input_val.length > 1) {
			formatted += " (" + input_val.substring(1, 4);
		}
		if (input_val.length >= 4) {
			formatted += ")";
		}
		if (input_val.length >= 4) {
			formatted += " " + input_val.substring(4, 7);
		}
		if (input_val.length >= 7) {
			formatted += "-" + input_val.substring(7, 9);
		}
		if (input_val.length >= 9) {
			formatted += "-" + input_val.substring(9, 11);
		}

		inputPhone.value = formatted;
		var updated_len = formatted.length;
		caret_pos = updated_len - original_len + caret_pos;
		if (caret_pos < 0) caret_pos = 0;
		inputPhone.setSelectionRange(caret_pos, caret_pos);


		if (input_val.length < 11) {
			inputPhone.style.borderBottom = '2px solid red';
		} else {
			inputPhone.style.borderBottom = '2px Solid black';
		}
	};

	async function validationCreateTool(event){
		event.preventDefault();
		let startPrice = document.getElementById('startPriceCreate');

		console.log(startPrice.value);

		if(startPrice.value < 1){
			startPrice.style.borderBottom = '2px solid red';
			return false;
		}
		else{
			startPrice.style.borderBottom = '0';
		}

		var name = document.getElementById('ToolNameCreate').value;
		var file = document.getElementById('ToolImgCreate').files[0];
		var price = String(document.getElementById('startPriceCreate').value);
		var bId = String(@Model.brokerId);

		console.log('file', file);
		console.log('BrokersId', bId);
		console.log('NameInvestTool', name);
		console.log('Price', price);

		var data = await createTool(file, name, price, bId );

		return true;
	}

	async function createTool(file, name, price, bId ){
		try{
			const formData = new FormData();
			formData.append('file', file);
			formData.append('BrokersId', bId);
			formData.append('NameInvestTool', name);
			formData.append('Price', price);


			const baseUrl = '@Model.apiSettings.BaseUrl';
			const response = await fetch(baseUrl + 'Broker/CreateTool', {
				method: 'PUT',
				body: formData
			});
			if (!response.ok) {
					throw new Error('Network response was not ok');
			}
		}
		catch(error) {
			console.error('There was a problem with the fetch operation:', error);
		}
	}

	async function validationEditTool(event)
	{
		event.preventDefault();
		let startPrice = document.getElementById('ToolPriceEdit');


		if(startPrice.value < 1){
			startPrice.style.borderBottom = '2px solid red';
			return false;
		}
		else{
			startPrice.style.borderBottom = '0';
		}

		var name = document.getElementById('ToolNameEdit').value;
		var file = document.getElementById('ToolImgEdit').files[0];
		var price = Number(document.getElementById('ToolPriceEdit').value);
		var tId = document.getElementById('targetIdEdit').value;

		console.log('file', file);
		console.log('id', tId);
		console.log('name', name);
		console.log('price', price);

		var data = await editTool(file, name, price, tId );

		return true;
	}

	async function editTool(file, name, price, tId ){
		try{
			const formData = new FormData();
			formData.append('file', file);
			formData.append('id', tId);
			formData.append('name', name);
			formData.append('price', price);


			const baseUrl = '@Model.apiSettings.BaseUrl';
			const response = await fetch(baseUrl + 'Broker/UpdateTool', {
				method: 'PATCH',
				body: formData
			});
			if (!response.ok) {
					throw new Error('Network response was not ok');
			}
		}
		catch(error) {
			console.error('There was a problem with the fetch operation:', error);
		}
	}

	async function deleteTool()
	{
		var id_ = document.getElementById('targetId').value;
		await deleteToolMethod(id_);
	}

	async function fastDeleteTool(id_){
		console.log(1);
		await deleteToolMethod(id_);
	}

	async function deleteToolMethod(id_){
		try{
			const baseUrl = '@Model.apiSettings.BaseUrl';
			const response = await fetch(baseUrl + 'Broker/DeleteTool', {
				method: 'PATCH',
				headers: {
				'Content-Type': 'application/json'
				},
				body: JSON.stringify({ id: id_ })
			});
			if (!response.ok) {
					throw new Error('Network response was not ok');
			}
		}
		catch(error) {
			console.error('There was a problem with the fetch operation:', error);
		}
	}
</script>