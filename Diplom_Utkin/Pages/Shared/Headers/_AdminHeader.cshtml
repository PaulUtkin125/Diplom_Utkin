<header>
    <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light border-bottom box-shadow mb-3">
        <div class="container">
            <div class="hd-imgBlock">
                <a asp-page="/AdminePage/Index">
                    <img src="/Image/mainIcon2.png" alt="Alternate Text" />
                </a>

            </div>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                    aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                <ul class="navbar-nav flex-grow-1 hd-nav">
                    <li class="nav-item myItem">
                        <a class="nav-link" asp-page="/AdminePage/Requests">Заявки</a>
                    </li>
                    <li class="nav-item myItem">
                        <a class="nav-link" asp-page="/AdminePage/UsersList">Пользователи</a>
                    </li>
                    <li class="nav-item myItem">
                        <a class="nav-link" asp-page="/AdminePage/ReportsPage">Отчеты</a>
                    </li>
                </ul>
                <ul class="navbar-nav">
                    
                    <li class="nav-item myItem">
                        <a class="nav-link" onclick="profilOpen()">
                            <div class="hd-imgBlock settings">
                                <img src="/Image/Profil.png" alt="Alternate Text" />
                            </div>
                        </a>
                    </li>
                    <li class="nav-item myItem">

                        <a class="nav-link" href="#" onclick="vuhodOnStart(event)">Выйти</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>
</header>
<div id="notification-container"></div>

<script>
    function showNotification(message) {
      const container = document.getElementById('notification-container');

      const notif = document.createElement('div');
      notif.classList.add('notification');
      notif.textContent = message;

      notif.addEventListener('click', () => hideNotification(notif));

      container.appendChild(notif);

      setTimeout(() => hideNotification(notif), 4000);
    }
    function showNotification_positive(message) {
      const container = document.getElementById('notification-container');

      const notif = document.createElement('div');
      notif.classList.add('notification');
      notif.classList.add('notification-positive');
      notif.textContent = message;

      notif.addEventListener('click', () => hideNotification(notif));

      container.appendChild(notif);

      setTimeout(() => hideNotification(notif), 4000);
    }

    function hideNotification(element) {
      element.style.animation = 'slideOut 0.5s forwards';
      element.addEventListener('animationend', () => element.remove());
    }



    async function optionFormOpen(id){
        openPopup();


        const data = await BrokerData(id);
        document.getElementById('CreateForm').style.display = 'none';
        document.getElementById('optionForm').style.display = 'block';
        document.getElementById('targetId').value = id;


        const targetBrokerImg = document.getElementById('targetBrokerImg');
        const BrokerName = document.getElementById('BrokerName');
        const brokerINN = document.getElementById('brokerINN');
        const brokerKPP =  document.getElementById('brokerKPP');
        const brokerOTKMO = document.getElementById('brokerOTKMO');
        const brokerPhone =  document.getElementById('brokerPhone');
        const brokerAddress = document.getElementById('brokerAddress');
        const brokerEmail = document.getElementById('brokerEmail');


        targetBrokerImg.setAttribute('src', 'data:image/png;base64,' + data.sourseFile);
        BrokerName.textContent = data.nameBroker;
        
        brokerINN.textContent = 'ИНН: ' + data.inn;
        brokerKPP.textContent = 'КПП: ' + data.kpp;
        brokerOTKMO.textContent = 'ОТКМО: ' + data.oktmo;
        brokerPhone.textContent = 'Телефон: ' + data.phone;
        brokerAddress.textContent = 'Юридический адресс:' + data.businessAddress;
        brokerEmail.textContent = 'E-mail: ' + data.email;

        if(data.typeOfRequestId == 3) {
             document.getElementById('positive_btn').style.display = 'block';
             document.getElementById('negative_btn').style.display = 'none';
        }
        else if (data.typeOfRequestId == 2)
        {
             document.getElementById('positive_btn').style.display = 'none';
             document.getElementById('negative_btn').style.display = 'block';

        }
        else if (data.typeOfRequestId == 1){
             document.getElementById('positive_btn').style.display = 'block';
             document.getElementById('negative_btn').style.display = 'block';
        }
    };

     async function optionFormOpenDop(id){
         openPopup();
         const data = await BrokerData(id);

         document.getElementById('CreateForm').style.display = 'none';
         document.getElementById('optionForm').style.display = 'block';

         document.getElementById('targetId').value = id;

         // document.getElementById('targetBrokerImg').setAttribute('src', 'data:image/png;base64,' + data.sourseFile);
         document.getElementById('BrokerName').textContent = data.nameBroker;
         document.getElementById('brokerINN').textContent = 'ИНН: ' + data.inn;
         document.getElementById('brokerKPP').textContent = 'КПП: ' + data.kpp;
         document.getElementById('brokerOTKMO').textContent = 'ОТКМО: ' + data.oktmo;
         document.getElementById('brokerPhone').textContent = 'Телефон: ' + data.phone;
         document.getElementById('brokerAddress').textContent = 'Юридический адресс:' + data.businessAddress;
         document.getElementById('brokerEmail').textContent = 'E-mail: ' + data.email;

         if(data.typeOfRequestId == 3) {
             document.getElementById('positive_btn').style.display = 'block';
             document.getElementById('negative_btn').style.display = 'none';
         }
         else if (data.typeOfRequestId == 2)
         {
             document.getElementById('positive_btn').style.display = 'none';
             document.getElementById('negative_btn').style.display = 'block';

         }
         else if (data.typeOfRequestId == 1){
             document.getElementById('positive_btn').style.display = 'block';
             document.getElementById('negative_btn').style.display = 'block';
         }

     };

    async function BrokerData(id_){
        const baseUrl = '@Model.apiSettings.BaseUrl';
        const response = await fetch(baseUrl + 'Admin/targetBroker', {
            method: 'POST',
            headers:{
                'Content-Type':'application/json'
            },
            body: JSON.stringify({ id: id_ })
        });
        if(!response.ok){
            throw new Error('Network response was not ok');
        }
        const data = await response.json();

        return data;

    };


    async function userFormOpen(id){
        openPopup();

        document.getElementById('editForm').style.display ='none';
        document.getElementById('optionForm').style.display ='block';

        var data = await UserData(id);

        document.getElementById('targetId').value = Number(id);

        console.log( document.getElementById('targetId').value);

        document.getElementById('uLogin').textContent = 'E-mail: ' + data.loggin;
        document.getElementById('uPhone').textContent = 'Телефон: ' + data.phone;

    };

    async function fastEditFormOpen(id){
        document.getElementById('targetId_Edit').value = id;
        var data = await UserData(id);


        openPopup();
        document.getElementById('editForm').style.display ='block';
        document.getElementById('optionForm').style.display ='none';

        document.getElementById('targetId').value = Number(id);

        document.getElementById('uLoginEdit').value = data.loggin;
        document.getElementById('uPhoneEdit').value = data.phone;
        
    };

    async function editFormOpen(id){
        document.getElementById('targetId_Edit').value = document.getElementById('targetId').value;
        const id_ = document.getElementById('targetId_Edit').value;

        var data = await UserData(id_);
        

        document.getElementById('editForm').style.display ='block';
        document.getElementById('optionForm').style.display ='none';

        document.getElementById('targetId').value = Number(id);

        document.getElementById('uLoginEdit').value = data.loggin;
        document.getElementById('uPhoneEdit').value = data.phone;

   
        uTypeSelect.value = data.typeOfUser.id;
        document.getElementById('uTypeEdit').value = data.typeOfUser.id;
    };

    function CreateForm_Open(){
        openPopup();
        document.querySelector('.popup').style.width = 'max-content';
        document.getElementById('optionForm').style.display ='none';
        document.getElementById('CreateForm').style.display = 'block';
    };

    async function UserData(id_){
        const baseUrl = '@Model.apiSettings.BaseUrl';
        const response = await fetch(baseUrl + 'Admin/targetUser', {
            method: 'POST',
            headers:{
                'Content-Type':'application/json'
            },
            body: JSON.stringify({ id: id_ })
        });
        if(!response.ok){
            throw new Error('Network response was not ok');
        }
        const data = await response.json();

        return data;
    };

   

    async function Update_Method(event){
        event.preventDefault();

        const id_ = document.getElementById('targetId_Edit').value;
        const mail_ = document.getElementById('uLoginEdit').value;
        // const idRole_ = document.getElementById('uTypeEdit').value;
        var phone_ = document.getElementById('uPhoneEdit').value;

        if(mail_.trim() == '') return false;
        if(phone_ != null){
            if(phone_.trim().length > 2 && phone_.trim().length < 18) {
            showNotification('Номер телефона указан не верно!');
            }
            if (phone_.trim().length <= 2) {
                document.getElementById('uPhoneEdit').value = null;
                phone_ = '';
            }
        }
        else phone_ = '';


        
         const idRole_ = 2;
         if(phone_ == 18 || phone_ == ''){
             await updateUser(id_, mail_, idRole_, phone_);
             event.target.submit();
         }
      
    };


    var startLogin = '';
    var startPhone = '';

    function updateLogin(){
        document.getElementById('portfile_mail').disabled = false;
        document.getElementById('portfile_save_btn').style.display = 'block';
    };
    function updatePhone(){
        document.getElementById('portfile_phone').disabled = false;
        document.getElementById('portfile_save_btn').style.display = 'block';
    };

    function Update_Method_Profile(event){
        event.preventDefault();
        var isValid = true;
        const id_ = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model._user.Id));
        const mail_ = document.getElementById('portfile_mail').value;
        var phone_ = document.getElementById('portfile_phone').value;


        if(phone_ != null){
            if(phone_.trim().length > 2 && phone_.trim().length < 18) {
                document.getElementById('profilePhoneError').textContent = 'Номер телефона указан не полностью!';
                document.getElementById('portfile_phone').style.borderBottom = '2px solid red';

                isValid = false;
            }
            else{
                document.getElementById('profilePhoneError').textContent = '';
                document.getElementById('portfile_phone').style.borderBottom = '2px solid black';
            }
            if (phone_.trim().length <= 2) {
                document.getElementById('portfile_phone').value = null;
                phone_ = '';
            }
        }
        else phone_ = '';

        /////////////////////////////////////////////////////////////////////////////////////

        const idRole_ = 1;

        if(isValid){
             updateUser(id_, mail_, idRole_, phone_);
             if(data == 1) event.target.submit();
        }
    };

    async function updateUser(id_, mail_, idRole_, phone_) {
        const baseUrl = '@Model.apiSettings.BaseUrl';
        const response = await fetch(baseUrl + 'Admin/updateUser', {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ id: id_, Loggin: mail_, Phone: phone_, TypeOfUserId: idRole_ })
        });
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        const data = response.json();
        console.log('User updated successfully:', data);
    };

   

    async function CreateBroker(file, NameBroker, INN, KPP, OKTMO, BusinessAddress, Phone, Email, FullNameOfTheDirector)
    {
        const formData = new FormData();
        formData.append('file', file);
        formData.append('NameBroker', NameBroker);
        formData.append('UrisidikciiyId', 1);
        formData.append('INN', INN);
        formData.append('KPP', KPP);
        formData.append('OKTMO', OKTMO);
        formData.append('BusinessAddress', BusinessAddress);
        formData.append('Phone', Phone);
        formData.append('Email', Email);
        formData.append('FullNameOfTheDirector', FullNameOfTheDirector)

        const baseUrl = '@Model.apiSettings.BaseUrl';
        const response = await fetch(baseUrl + 'Universal/CreateBroker', {
            method: 'POST',
            body: formData
        });
        const data = response.json();
        return data;
        
    }


    window.onpopstate = function(event)
    {
        vuhodOnStart(event);
    }
</script>