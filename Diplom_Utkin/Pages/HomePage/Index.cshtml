@page
@model Diplom_Utkin.Pages.HomePage.IndexModel
@{
	ViewData["Title"] = "Finance manager";
}

<div class="window-box kabinet-box">
	@await Html.PartialAsync("Headers/_HomeHeader")
	<section>
		<div id="overlay" class="overlay"></div>
		<div class="popup">
			<div class="poputContent">
				<div class="top_">
					<div>
						<form method="post" asp-action="NoN">
							<button name="NoN"><img src="/Image/krest.png" alt="Alternate Text" /></button>
						</form>
						
					</div>

				</div>
				<div class="contentVhod" id="vhodAdminBox">
					<div class="form-block">
						<form method="post" >
							<h1>Авторизация</h1>
							<div class="form-group">
								<label asp-for="user.Login" class="control-label">E-mail</label>
								<input asp-for="user.Login" class="form-control" type="email" id="loginAdmin" required />
								<span asp-validation-for="user.Login" class="text-danger"></span>
							</div>

							<div class="form-group">
								<label asp-for="user.Password" class="control-label">Пароль</label>
								<input asp-for="user.Password" class="form-control" type="password" id="passwordloginAdmin" required />
								<span asp-validation-for="user.Password" class="text-danger"></span>
							</div>
							<div class="form-group">
								<button class="myButton" name="action" type="submit" value="vhodAdmin_btn">Войти</button>
							</div>
						</form>
					</div>
				</div>
				<div class="contentVhod" id="vhodBox">
					<div class="form-block">
						<form method="post">
							<h1>Авторизация</h1>
							<div class="form-group">
								<label asp-for="user.Login" class="control-label">E-mail</label>
								<input asp-for="user.Login" class="form-control" type="email" id="login" required />
								<span asp-validation-for="user.Login" class="text-danger"></span>
							</div>

							<div class="form-group">
								<label asp-for="user.Password" class="control-label">Пароль</label>
								<input asp-for="user.Password" class="form-control" type="password" id="password" required />
								<span asp-validation-for="user.Password" class="text-danger"></span>
							</div>
							<div class="form-group">
								<button class="myButton" name="action" type="submit" value="vhod_btn">Войти</button>
							</div>
						</form>
						<div class="form-group">
							<button class="myButton" onclick="regOpen()">У Вас нет аккаунта? Зарегистрируйтесь</button>
						</div>
					</div>
				</div>
				<div class="contentVhod" id="regBox">
					<div class="form-block">
						<form id="userReg" method="post">
							<h1>Регистрация</h1>
							<div class="form-group">
								<label asp-for="logoValidationReg.Email" class="control-label">E-mail</label>
								<input asp-for="logoValidationReg.Email" class="form-control" type="email" id="regLogin" required />
								<span asp-validation-for="logoValidationReg.Email" id="mailRegUserError" class="text-danger"></span>
							</div>

							<div class="form-group">
								<label asp-for="logoValidationReg.Password" class="control-label">Пароль</label>
								<input asp-for="logoValidationReg.Password" class="form-control" type="password" id="regPassword" required />
								<span asp-validation-for="logoValidationReg.Password" id="regPassworderror" class="text-danger"></span>
							</div>

							<div class="form-group form-row">
								<label asp-for="logoValidationReg.ConfirmPassword" class="control-label">Повторите пароль</label>
								<input asp-for="logoValidationReg.ConfirmPassword" class="form-control" type="password" id="confirmPassword" required />
								<span asp-validation-for="logoValidationReg.ConfirmPassword" id="confirmPasswordError" class="text-danger"></span>
							</div>
							<div class="form-group">
								<button class="myButton" type="submit" >Зарегистрироваться</button>
							</div>

						</form>
						<div class="form-group">
							<button class="myButton" onclick="vhodOpen()">У Вас есть аккаунта? Авторизуйтесь</button>
						</div>
					</div>
				</div>
				<div class="contentVhod" id="confirmCodeBox">
					<div class="form-block">
						<form method="post" id="confitm" onsubmit="return validConfirm()">
							<div class="form-group">
								<label asp-for="codeValidation.securityCode" class="control-label">Введите код подтверждения</label>
								<input asp-for="codeValidation.securityCode" class="form-control" type="number" id="confirmCode" required />
								<span asp-validation-for="codeValidation.securityCode" class="text-danger" id="confirmError"></span>
							</div>
							<input type="hidden" asp-for="logoValidationReg.Email" id="supportLogin" />
							<input type="hidden" asp-for="logoValidationReg.Password" id="supportPassword" />

							<input type="file" style="visibility:hidden; height:1px;" id="supportFile" />
							<input type="hidden" asp-for="Broker.NameBroker" id="supportBrokerName" />
							<input type="hidden" asp-for="Broker.INN" id=" supportbrokerINN" />
							<input type="hidden" asp-for="Broker.KPP" id="supportbrokerKPP" />
							<input type="hidden" asp-for="Broker.OKTMO" id="supportBrokerOTKMO" />
							<input type="hidden" asp-for="Broker.BusinessAddress" id="supportBrokerAddress" />
							<input type="hidden" asp-for="Broker.Phone" id="supportbrokerPhone" />
							<input type="hidden" asp-for="Broker.FullNameOfTheDirector" id="supportBrokerDir" />

							<div class="form-group">
								<button class="myButton" type="submit" name="action" id="userReg_btn" value="Registr_btn">Подтвердить</button>
							</div>
						</form>
					</div>
				</div>


				<div class="contentVhod" id="vhodBrokerBox">
					<div class="form-block">
						<form method="post">
							<h1>Авторизация</h1>
							<div class="form-group">
								<label asp-for="user.Login" class="control-label">E-mail</label>
								<input asp-for="user.Login" class="form-control" type="email" id="loginBroker" />
								<span asp-validation-for="user.Login" class="text-danger"></span>
							</div>

							<div class="form-group">
								<label asp-for="user.Password" class="control-label">Пароль</label>
								<input asp-for="user.Password" class="form-control" type="password" id="passwordloginBroker" />
								<span asp-validation-for="user.Password" class="text-danger"></span>
							</div>
							<div class="form-group">
								<button class="myButton" name="action" type="submit" value="vhodBroker_btn">Войти</button>
							</div>
						</form>
						<div class="form-group">
							<button class="myButton" onclick="regBrokerOpen()">У Вас нет аккаунта? Зарегистрируйтесь</button>
						</div>
					</div>
				</div>
				<div class="contentVhod" id="brocerCreateForm">
					<div class="form-block">
						<form id="brokerReg1" asp-action="regBroker_Btn" onsubmit="return validationCreateBroker(event)" method="post">
							<h1>Регистрация</h1>

							<div class="myRow">
								<div class="dataSlice">
									<div class="form-group">
										<label class="control-label">Выберите иконку</label>
										<input class="form-control" type="file" accept=".jpg, .jpeg, .png" id="BrokerImgCreate"/>
										<span class="text-danger"></span>
									</div>
									<div class="form-group">
										<label class="control-label">Название</label>
										<input asp-for="Broker.NameBroker" class="form-control" type="text" id="BrokerNameCreate" required />
										<span class="text-danger" asp-validation-for="Broker.NameBroker"></span>
									</div>
									<div class="form-group">
										<label class="control-label">ИНН</label>
										<input asp-for="Broker.INN" class="form-control" type="text" maxlength="10" id="brokerINNCreate" required />
										<span asp-validation-for="Broker.INN" id="INNError" class="text-danger"></span>
									</div>
									<div class="form-group">
										<label class="control-label">КПП</label>
										<input asp-for="Broker.KPP" class="form-control" type="text" maxlength="9" id="brokerKPPCreate" required />
										<span asp-validation-for="Broker.KPP" class="text-danger"></span>
									</div>
									<div class="form-group">
										<label class="control-label">ОТКМО</label>
										<input asp-for="Broker.OKTMO" class="form-control" type="text" maxlength="11" id="brokerOTKMOCreate" required />
										<span asp-validation-for="Broker.OKTMO" class="text-danger"></span>
									</div>
								</div>

								<div class="dataSlice">
									<div class="form-group">
										<label class="control-label">Бизнес адрес</label>
										<input asp-for="Broker.BusinessAddress" class="form-control" type="text" id="brokerAddressCreate" required />
										<span asp-validation-for="Broker.BusinessAddress" class="text-danger"></span>
									</div>

									<div class="form-group">
										<label class="control-label">E-mail</label>
										<input asp-for="Broker.Email" class="form-control" type="email" id="uLoginCreate" required />
										<span asp-validation-for="Broker.Email" class="text-danger" id="mailBrokerCreateError"></span>
									</div>
									<div class="form-group">
										<label class="control-label">Телефон</label>
										<input asp-for="Broker.Phone" class="form-control" type="tel" placeholder="+7 (901) 168-12-12" maxlength="18" id="uPhoneCreate" />
										<span class="text-danger" asp-validation-for="Broker.Phone"></span>
									</div>
									<div class="form-group">
										<label class="control-label">Директор:</label>
										<input asp-for="Broker.FullNameOfTheDirector" class="form-control" type="text" id="brokerDirCreate" />
										<span asp-validation-for="Broker.FullNameOfTheDirector" class="text-danger"></span>
									</div>
								</div>
							</div>


							<div class="myRow">
								<button class="myButton" name="action" type="submit">Зарегестрироваться</button>
								
							</div>
						</form>
						<button class="myButton" onclick="BrokerOpen()">У Вас есть аккаунта? Авторизуйтесь</button>
					</div>
				</div>
			</div>
		</div>
	</section>
	<div class="container logoForm">
		<section class="Liefhac_box">
			<div class="container-lifehack">
				<div class="Liefhac_img">
					<img src="~/Image/1721209876568.png" />
				</div>
				<div class="textLifhac helowBox">
					<h3 class="bold_">Откройте брокерский счёт</h3>
					<p>Более <strong class="bold_">6 млн</strong> клиентов выбрали Finance manager своим брокером. Акции, облигации, валюта и многое другое на нашем сайте.</p>
					
					
					<a onclick="regOpen()" class="myButton">
						Открыть счёт
					</a>
				</div>
			</div>
		</section>

		<section class="vozmozhnosti_Box">
			<div class="item_Vozmozhnost">
				<h4>
					Один счет - много бирж
				</h4>
				<p>
					Доступ к акциям, облигациям, валюте, фьючерсам, опционам и драгметаллам на Московской бирже, СПБ Бирже, HKEX, NYSE и NASDAQ.
				</p>
				<div>
					<img src="/Image/vozmozhnosti/Icon1.png" />
				</div>
			</div>
			<div class="item_Vozmozhnost">
				<h4>
					Надежно
				</h4>
				<p>
					«Finance manager» — самый надежный брокер 2023 года по версии премии «Финансовая Элита России», с рейтингом «АА-|ru.iv|» от НРА.
				</p>
				<div>
					<img src="/Image/vozmozhnosti/Icon4.png" />
				</div>
			</div>
			<div class="item_Vozmozhnost">
				<h4>
					Один счет - много бирж
				</h4>
				<p>
					Удобное приложение Finance manager для всех основных платформ, техподдержка 24/7 в чате или на бесплатной горячей линии.
				</p>
				<div>
					<img src="/Image/vozmozhnosti/Icon3.png" />
				</div>
			</div>
		</section>

		<section class="Liefhac_box">
			<h4>Лайфхаки для умного старта в инвестициях</h4>
			<div>
				<div class="textLifhac">
					<div class="myRow">
						<div class="numberBox">1</div>
						<p><strong class="bold_">Станьте совладельцем успешных компаний —</strong> инвестируйте в акции российских и мировых гигантов, и зарабатывайте на изменении котировок.</p>
					</div>
					<div class="myRow">
						<div class="numberBox">2</div>
						<p><strong class="bold_">Получайте дивиденды —</strong> сформируйте стабильный денежный поток. Во времена высокой инфляции ряд эмитентов может выплачивать дивиденды с двузначной дивидендной доходностью — аналитики «Финама» внимательно следят за такими компаниями.</p>
					</div>
					<div class="myRow">
						<div class="numberBox">3</div>
						<p><strong class="bold_">Назначьте себе «купонную зарплату» —</strong> соберите облигационный портфель с фиксированными купонными выплатами из корпоративных, муниципальных и гособлигаций.</p>
					</div>
					<div class="myRow">
						<p>Узнайте больше лайфхаков для умного старта на бирже, а также получите бесплатно подписку на инвестидеи, аналитику и прогнозы по эмитентам и секторам экономики, чтобы принимать взвешенные торговые решения.</p>
					</div>
				</div>
				<div class="Liefhac_img">
					<img src="/Image/telNew.png"/>
				</div>
			</div>
		</section>
		<section class="primiiList">
			<h3>Наши награды</h3>
			<div class="carousel-wrapper">
				<div>
					<img src="/Image/Premii/Group_1393_4f519875d5.png" alt="Alternate Text" />
				</div>
				<div>
					<img src="/Image/Premii/Group_1394_2675a552bf.png" alt="Alternate Text" />
				</div>
				<div>
					<img src="/Image/Premii/Group_1396_1_115330bda2.png" alt="Alternate Text" />
				</div>

			</div>

			<script> 
				const carouselWrapper = document.querySelector('.carousel-wrapper');
				const items = document.querySelectorAll('.carousel-wrapper div');

				let itemCount = items.length;
				for (let i = 0; i < itemCount; i++) {
					let clone = items[i].cloneNode(true);
					carouselWrapper.appendChild(clone);
				}

				itemCount = items.length * 2;
				carouselWrapper.style.width = `${itemCount * 33.33}vw`;

			</script>
		</section>
	</div>
</div>

<footer class="border-top footer text-muted">
	<div class="container">
		<hr>
		<div>
			<p>&copy; 2025 - ООО «Finance manager»</p>
			<p>Не является индивидуальной инвестиционной рекомендацией.</p>
			<p>Приобретение иностранных ценных бумаг связано с дополнительными рисками.</p>
			<p><a onclick="BrokerOpen()" class="myA">Для партнеров</a></p>
			<p><a onclick="AdminOpen()" class="myA">Спец. возможности</a></p>
		</div>

	</div>
</footer>

@section Scripts {
	@{
		await Html.RenderPartialAsync("_ValidationScriptsPartial");
	}
}


<script>
	function showNotification(message) {
	  const container = document.getElementById('notification-container');

	  var notif = document.createElement('div');
	  notif.classList.add('notification');
	  notif.textContent = message;

	  notif.addEventListener('click', () => hideNotification(notif));

	  container.appendChild(notif);

	  setTimeout(() => hideNotification(notif), 4000);
	}
	function showNotification_positive(message) {
	  const container = document.getElementById('notification-container');

	  const notif = document.createElement('div');
	  notif.classList.add('notification');
	  notif.classList.add('notification-positive');
	  notif.textContent = message;

	  notif.addEventListener('click', () => hideNotification(notif));

	  container.appendChild(notif);

	  setTimeout(() => hideNotification(notif), 4000);
	}
	function hideNotification(element) {
	  element.style.animation = 'slideOut 0.5s forwards';
	  element.addEventListener('animationend', () => element.remove());
	}
	$(document).ready(function () 
	{
			var hasErrors = @Html.Raw(Json.Serialize(Model.errorSupport));
			if(hasErrors == 1){
				vhodOpen()
				document.getElementById('login').value = '';
				showNotification('Ошибка авторизации. Проверьте введенные данные.');
			}
			else if(hasErrors == 1.1){
				vhodOpen()
				document.getElementById('login').value = '';
				showNotification('Ошибка сервера. Повторите попытку позже');
			}
			else if (hasErrors == 2) {
				AdminOpen();
				document.getElementById('loginAdmin').value = '';
				showNotification('Ошибка авторизации. Проверьте введенные данные.');
			}
			else if(hasErrors == 2.1){
				AdminOpen()
				document.getElementById('loginAdmin').value = '';
				showNotification('Ошибка сервера. Повторите попытку позже');
			}
			else if(hasErrors == 3){
				BrokerOpen();
				showNotification('Ошибка авторизации. Проверьте введенные данные.');
			}
			else if(hasErrors == 3.1){
				vhodOpen()
				showNotification('Ошибка сервера. Повторите попытку позже');
			}
			else if (hasErrors == 4.1){
				showNotification_positive('Пользователь зарегистрирован');
			}
			else if (hasErrors == 4.2){
				showNotification_positive('Заявка отпралена на модерацию');
			}
	})

	
	

	const baseUrl = '@Model.apiSettings.BaseUrl';
	const popup = document.getElementById('regBox');
	const childElements = popup.querySelectorAll('*');




	document.getElementById('userReg').addEventListener('submit', async function(event) {
		event.preventDefault();
		 if (!$(this).valid()) {
			return false;
		}

		let regPassworderror = document.getElementById('regPassworderror').textContent;
		let confirmPasswordError = document.getElementById('confirmPasswordError').textContent;

		let isValid = await userValid();

		if(!isValid && regPassworderror.length < 3 && confirmPasswordError.length < 3){
			fetchData();
			comfirmOpen();

			return true;
		}
	});

	function validConfirm(){
		const enteredCode = document.getElementById('confirmCode').value;
		const targetMail = document.getElementById('supportLogin').value;
		const storedCode = localStorage.getItem(targetMail);

		if (enteredCode != storedCode) {
			document.getElementById('confirmCode').style.color = 'red';
			document.getElementById('confirmError').textContent = 'Код подтверждения неверен!';
			showNotification('Код подтверждения неверен!');
			return false;
		}

		document.getElementById('confirmCode').style.color = 'black';
		document.getElementById('confirmError').textContent = '';
		
		return true;

	}




	async function userValid(){
		var loginError = document.getElementById('mailRegUserError').textContent;
		
		if(loginError != '') return true;

		var data = await validMail();
		if (!data) return true;


		return false;
	}

	async function validMail() {
		try {
			const mail = document.getElementById('regLogin').value;
			const response = await fetch(baseUrl+'Logo/validationMail', {
				method:'POST',
				headers:{
					'Content-Type':'application/json'
				},
				body: JSON.stringify({ toMail: mail })
			});
			if (!response.ok) {
				showNotification('Данный E-mail уже используется! Укажите другой');
				return false;
				throw new Error('Network response was not ok');
			}
			const data = await response.json();
			if (!data)
			{
				showNotification('Данный E-mail уже используется! укажите другой');
				return false;
			}
			return true;
		}
		catch (error) {
			showNotification(error);
			console.error('There was a problem with the fetch operation:', error);
			return false;
		}
	}

	async function fetchData() {

		try {
			const mail = document.getElementById('regLogin').value;
			const response = await fetch(baseUrl+'Universal/SendCode', {
				method:'POST',
				headers:{
					'Content-Type':'application/json'
				},
				body: JSON.stringify({ toMail: mail })
			});
			if (!response.ok) {
				popup.style.cursor = 'auto';
				childElements.forEach(child => {
					child.style.cursor = 'auto';
				});
				throw new Error('Network response was not ok');
			}
			const data = await response.json();

			localStorage.setItem(mail, String(data));

			showNotification_positive('Код подтверждения отправлен');

			document.getElementById('supportPassword').value = document.getElementById('regPassword').value;
			document.getElementById('supportLogin').value = mail;

			popup.style.cursor = 'auto';
			childElements.forEach(child => {
				child.style.cursor = 'auto';
			});

		} 
		catch (error) {
			showNotification(error);
			console.error('There was a problem with the fetch operation:', error);
			popup.style.cursor = 'auto';
			childElements.forEach(child => {
				child.style.cursor = 'auto';
			});

			return false;
		}
	}


	document.getElementById('userReg').addEventListener('submit', function(event) {
		event.preventDefault();

		const enteredCode = document.getElementById('confirmCode').value;
		const targetMail = document.getElementById('supportLogin').value;
		const storedCode = localStorage.getItem(targetMail);

		if (enteredCode != storedCode) {

			return false;
		}

		document.getElementById('confirmCode').style.color = 'black';
		document.getElementById('confirmError').textContent = '';

		showNotification_positive('Пользователь зарегестрирован');
		setTimeout(() => 4000);
		event.target.submit();
	});

	function vhodOpen() {
		openPopup();

		document.getElementById('brocerCreateForm').style.display = 'none';
		document.getElementById('vhodBrokerBox').style.display = 'none';
		document.getElementById('confirmCodeBox').style.display = 'none';
		document.getElementById('vhodAdminBox').style.display = 'none';
		document.getElementById('regBox').style.display = 'none';

		document.getElementById('vhodBox').style.display = 'block';
	}
	function regOpen() {
		openPopup();

		document.getElementById('userReg_btn').style.display = 'block';

		document.getElementById('brocerCreateForm').style.display = 'none';
		document.getElementById('vhodBrokerBox').style.display = 'none';
		document.getElementById('confirmCodeBox').style.display = 'none';
		document.getElementById('vhodAdminBox').style.display = 'none';
		document.getElementById('vhodBox').style.display = 'none';
		document.getElementById('regBox').style.display = 'block';
	}

	function comfirmOpen() {
		
		document.getElementById('brocerCreateForm').style.display = 'none';
		document.getElementById('vhodBrokerBox').style.display = 'none';
		document.getElementById('regBox').style.display = 'none';
		document.getElementById('vhodBox').style.display = 'none';
		document.getElementById('vhodAdminBox').style.display = 'none';

		document.getElementById('confirmCodeBox').style.display = 'block';

		document.getElementById('confirmCode').value = '';
	}

	function AdminOpen(){
		openPopup();

		document.getElementById('brocerCreateForm').style.display = 'none';
		document.getElementById('vhodBrokerBox').style.display = 'none';
		document.getElementById('confirmCodeBox').style.display = 'none';
		document.getElementById('regBox').style.display = 'none';
		document.getElementById('vhodBox').style.display = 'none';

		document.getElementById('vhodAdminBox').style.display = 'block';
	}



	////////////////////////////////   for broker   //////////////////////////////////////////////////
	
	function BrokerOpen() {
		openPopup();

		document.getElementById('vhodBrokerBox').style.display = 'block';

		document.getElementById('brocerCreateForm').style.display = 'none';
		document.getElementById('confirmCodeBox').style.display = 'none';
		document.getElementById('vhodAdminBox').style.display = 'none';
		document.getElementById('regBox').style.display = 'none';
		document.getElementById('vhodBox').style.display = 'none';
	}

	function regBrokerOpen(){
		openPopup();

		document.getElementById('userReg_btn').style.display = 'none';

		document.querySelector('.popup').style.width = 'max-content';
		document.getElementById('brocerCreateForm').style.display = 'block';

		document.getElementById('vhodBrokerBox').style.display = 'none';
		document.getElementById('confirmCodeBox').style.display = 'none';
		document.getElementById('vhodAdminBox').style.display = 'none';
		document.getElementById('regBox').style.display = 'none';
		document.getElementById('vhodBox').style.display = 'none';
	}

	let input = document.getElementById("brokerINNCreate");
	input.addEventListener("keyup", (e) => { formatINN(e.target); });
	input.addEventListener("keypress", (e) => { formatINN(e.target); });

	function formatINN(input) {
		var input_val = input.value;
		if (input_val === "") { return; }
		input_val = input_val.replace(/\D/g, "");
		input.value = input_val;
		var updated_len = input_val.length;


		if(updated_len < 10) input.style.borderBottom = '2px solid red';
		else input.style.borderBottom = '0';
	}

	let inputOTKMO = document.getElementById("brokerOTKMOCreate");
	inputOTKMO.addEventListener("keyup", (e) => { formatOTKMO(e.target); });
	inputOTKMO.addEventListener("keypress", (e) => { formatOTKMO(e.target); });

	function formatOTKMO(inputOTKMO) {
		var input_val = inputOTKMO.value;
		if (input_val === "") { return; }
		input_val = input_val.replace(/\D/g, "");
		inputOTKMO.value = input_val;
		var updated_len = input_val.length;


		if(updated_len < 11) inputOTKMO.style.borderBottom = '2px solid red';
		else inputOTKMO.style.borderBottom = '0';
	}

	let inputKPP = document.getElementById("brokerKPPCreate");
	inputKPP.addEventListener("keyup", (e) => { formatKPP(e.target); });
	inputKPP.addEventListener("keypress", (e) => { formatKPP(e.target); });

	function formatKPP(inputKPP) {
		var input_val = inputKPP.value;
		if (input_val === "") { return; }
		input_val = input_val.replace(/\D/g, "");
		inputKPP.value = input_val;
		var updated_len = input_val.length;


		if(updated_len < 9) inputKPP.style.borderBottom = '2px solid red';
		else inputKPP.style.borderBottom = '0';
	}

	let inputPhone = document.getElementById("uPhoneCreate");
	inputPhone.addEventListener("keyup", (e) => { formatinputPhone(e.target); });
	inputPhone.addEventListener("keypress", (e) => { formatinputPhone(e.target); });

	function formatinputPhone(inputPhone) {
		var input_val = inputPhone.value;
		if (input_val === "") { return; }
		var original_len = input_val.length;
		var caret_pos = inputPhone.selectionStart;
		input_val = input_val.replace(/\D/g, "");
		if (input_val.length > 0 && input_val[0] !== "7") {
			input_val = "7" + input_val;
		}
		if (input_val.length > 11) {
			input_val = input_val.substring(0, 11);
		}
		var formatted = "+";

		if (input_val.length > 0) {
			formatted += input_val[0];
		}
		if (input_val.length > 1) {
			formatted += " (" + input_val.substring(1, 4);
		}
		if (input_val.length >= 4) {
			formatted += ")";
		}
		if (input_val.length >= 4) {
			formatted += " " + input_val.substring(4, 7);
		}
		if (input_val.length >= 7) {
			formatted += "-" + input_val.substring(7, 9);
		}
		if (input_val.length >= 9) {
			formatted += "-" + input_val.substring(9, 11);
		}

		inputPhone.value = formatted;
		var updated_len = formatted.length;
		caret_pos = updated_len - original_len + caret_pos;
		if (caret_pos < 0) caret_pos = 0;
		inputPhone.setSelectionRange(caret_pos, caret_pos);


		if (input_val.length < 11) {
			inputPhone.style.borderBottom = '2px solid red';
		} else {
			inputPhone.style.borderBottom = '0';
		}
	}

	async function validationCreateBroker(event){ ////////////////////////////////////////////////////////////////////////
		event.preventDefault();

		var INNBlock = document.getElementById('brokerINNCreate');
		var bMail =  document.getElementById('uLoginCreate');

		var INN = INNBlock.value;
		var Phone = document.getElementById('uPhoneCreate').value;
		var Email = bMail.value;

		

		var INNError = document.getElementById('INNError');

		console.log('INNBlock.value.length: ', INN);

		if(INNBlock.value.length < 10) {
			INNBlock.style.borderBottom = '2px solid red';
			return false;
		}
		else INNBlock.style.borderBottom = '0';

		if(Phone.length < 18) return false;

		var isINN = await validationINN(INN);
		if (isINN) {
			INNError.textContent = 'Данный ИНН уже используется!';
			showNotification('Данный ИНН уже используется!')
			INNBlock.style.borderBottom = '2px solid red';
			return false;
		}
		else {
			INNError.textContent = '';
			INNBlock.style.borderBottom = '0';
		}

		var kppBlock = document.getElementById('brokerKPPCreate');
		console.log('kppBlock.value.length: ', kppBlock.value.length )

		if(kppBlock.value.length < 9) {
			document.getElementById('brokerKPPCreate').style.borderBottom = '2px solid red';
			return false;
		}
		else document.getElementById('brokerKPPCreate').style.borderBottom = '0';

		var oktmoBlock = document.getElementById('brokerOTKMOCreate');
		console.log('oktmoBlock.value.length: ', oktmoBlock.value.length);

		if(oktmoBlock.value.length < 11) {
			document.getElementById('brokerOTKMOCreate').style.borderBottom = '2px solid red';
			return false;
		}
		else document.getElementById('brokerOTKMOCreate').style.borderBottom = '0';

		

		if(document.getElementById('userReg_btn').style.display == 'none'  )
		{
			var data = await validationBrokerMail(Email);
			if(!data){
				document.getElementById('mailBrokerCreateError').textContent = 'Этот E-mail уже используется!';
				showNotification('Этот E-mail уже используется!');
				bMail.style.borderBottom = '2px solid red';
				return false;
			}
			else 
			{
				bMail.style.borderBottom = '0';
				document.getElementById('mailBrokerCreateError').textContent = '';
			}

			INNBlock.style.borderBottom = '0';
			INNError.textContent = '';


			tr = await createBrocer_Btn();
			showNotification_positive('Заявка зарегестрирована');
			setTimeout(() => event.target.submit(), 4000);
			
			return true;
		}


		event.target.submit();
	}

	async function validationINN(inn){
		try {
			const response = await fetch(baseUrl+'Universal/ValidationINN', {
				method:'POST',
				headers:{
					'Content-Type':'application/json'
				},
				body: JSON.stringify({ toMail: inn })
			});
			const data = await response.json();

			return data == 1;
		}
		catch (error) {
			showNotification('Ошибка сервера. повторите попытку позже');
		}
	}

	async function validationBrokerMail(mail){
		try {
			console.log('Email: ', mail);
			const response = await fetch(baseUrl+'Logo/validationBrokerMail', {
				method:'POST',
				headers:{
					'Content-Type':'application/json'
				},
				body: JSON.stringify({ toMail: mail })
			});
			if (!response.ok) {
				throw new Error('Network response was not ok');
			}
			const data = await response.json();
			if (!data)
			{
				return false;
			}
			popup.style.cursor = 'wait';
			childElements.forEach(child => {
				child.style.cursor = 'wait';
			});
			return true;
		}
		catch (error) {
			console.error('There was a problem with the fetch operation:', error);
		}
	}

	async function createBrocer_Btn(){
		var file = document.getElementById('BrokerImgCreate').files[0];
		var NameBroker = document.getElementById('BrokerNameCreate').value;

		var INNBlock = document.getElementById('brokerINNCreate');
		var bMail =  document.getElementById('uLoginCreate');

		var INN = INNBlock.value;
		var KPP = document.getElementById('brokerKPPCreate').value;
		var OKTMO = document.getElementById('brokerOTKMOCreate').value;
		var BusinessAddress = document.getElementById('brokerAddressCreate').value;
		var Phone = document.getElementById('uPhoneCreate').value;
		var Email = bMail.value;
		var FullNameOfTheDirector = document.getElementById('brokerDirCreate').value;

		var data = await CreateBroker(file, NameBroker, INN, KPP, OKTMO, BusinessAddress, Phone, Email, FullNameOfTheDirector);
		return data;
	}


	function comfirmOpenDop() {

		document.getElementById('brocerCreateForm').style.display = 'none';
		document.getElementById('vhodBrokerBox').style.display = 'none';
		document.getElementById('regBox').style.display = 'none';
		document.getElementById('vhodBox').style.display = 'none';
		document.getElementById('vhodAdminBox').style.display = 'none';

		document.getElementById('confirmCodeBox').style.display = 'block';
		document.getElementById('confirmCode').value = '';
	}

	async function CreateBroker(file, NameBroker, INN, KPP, OKTMO, BusinessAddress, Phone, Email, FullNameOfTheDirector)
	{
		const formData = new FormData();
		formData.append('file', file);
		formData.append('NameBroker', NameBroker);
		formData.append('UrisidikciiyId', 1);
		formData.append('INN', INN);
		formData.append('KPP', KPP);
		formData.append('OKTMO', OKTMO);
		formData.append('BusinessAddress', BusinessAddress);
		formData.append('Phone', Phone);
		formData.append('Email', Email);
		formData.append('FullNameOfTheDirector', FullNameOfTheDirector)


		const baseUrl = '@Model.apiSettings.BaseUrl';
		const response = await fetch(baseUrl + 'Universal/CreateBroker', {
			method: 'POST',
			body: formData
		});
		const data = response.json();
		return data;

	}
</script>
